package pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import pascal.ast.*;

parser code {:

	public PascalProgram root = null;

	/* Reporte de error encontrado. */
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	/* Cuando se encuentra un error de donde el sistema no puede
		recuperarse, se lanza un error fatal. Se despliega el mensaje
		de error y se finaliza la ejecucion. */
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token, cur_token);
	}

	/* Metodo main para garantizar la ejecucion del analizador
	   lexico y sintactico, ademas que se pase como parametro la tabla
	   de simbolos correspondiente. */
	public static void main(String[] args){
		try {
			parser asin = new parser(
					new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
			System.out.println("\n*** Resultados finales ***");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
:};


terminal  PROGRAM, BEGIN, END, AND, ARRAY, CONST, DIV, DO, ELSE,
		  FOR, FUNCTION, IF, NIL, NOT, OF, OR, PROCEDURE, RECORD, THEN, TO, DOWNTO,
		  VAR, WHILE, LEFT_PAR, RIGHT_PAR, LEFT_BRACKET, RIGHT_BRACKET,
		  SEMICOLON, COLON, COMMA, DOT, ASIGN, PLUS, MINUS,
		  DIVIDE, PRODUCT, XOR, MOD, EQUALS, NOT_EQUAL, GREATER_THAN, LESS_THAN,
		  GREATER_EQUALS, LESS_EQUAL, INTEGER, WITH,
		  ID, IN, STRING, SET, FILE, PACKED, CASE, FORWARD, REPEAT,
		  UNTIL, CHAR, LEFT_KEY, TYPE, WRITE_LN, READ_LN, BOOLEAN, INT_CONST,
		  TRUE, FALSE, CHAR_CONS, RIGHT_KEY;
terminal String STRING_LITERAL;


non terminal PascalProgram pascalProgram;
non terminal ProgramHeading programHeading;
non terminal IdentifierList identifierList;
non terminal Block block, block1, block2, block3, block4, block5;
non terminal LabelDeclaration labelDeclaration;
non terminal ConstantDeclaration constantDeclaration;
non terminal TypeDeclaration typeDeclaration;
non terminal VariableDeclaration variableDeclaration;
non terminal VariableIdList variableidList;
non terminal Constant constant;
non terminal Type type;
non terminal SimpleType simpleType;
non terminal StructuredType structuredType;
non terminal IndexList indexList;
non terminal FieldList fieldList;
non terminal FixedPart fixedPart;
non terminal RecordField recordField;
non terminal FieldIdList fieldidList;
non terminal VariantPart variantPart;
non terminal TagField tagField;
non terminal VariantList variantList;
non terminal Variant variant;
non terminal CaseLabelList caseLabelList;
non terminal ProcAndFuncDeclaration procAndFuncDeclaration;
non terminal ProcOrFunc procOrFunc;
non terminal BlockOrForward blockOrForward;
non terminal Parameters parameters;
non terminal FormalParameterList formalParameterList;
non terminal FormalParameterSection formalParameterSection;
non terminal ParameterIdList parameteridList;
non terminal StatementList statementList;
non terminal Statement statement;
non terminal Variable variable;
non terminal SubscriptList subscriptList;
non terminal CaseList caseList;
non terminal ForList forList;
non terminal ExpressionList expressionList;
non terminal Label label;
non terminal RecordVariableList recordVariableList;
non terminal Expression expression;
non terminal RelationalOp relationalOp;
non terminal AdditiveExpression additiveExpression;
non terminal AdditiveOp additiveOp;
non terminal MultiplicativeExpression multiplicativeExpression;
non terminal MultiplicativeOp multiplicativeOp;
non terminal UnaryExpression unaryExpression;
non terminal UnaryOp unaryOp;
non terminal PrimaryExpression primaryExpression;
non terminal ElementList elementList;
non terminal Element element;
non terminal empty;

precedence left OR ;
precedence left AND ;
precedence nonassoc EQUALS, NOT_EQUAL, LESS_THAN, GREATER_THAN, LESS_EQUAL, GREATER_EQUALS ;
precedence left PLUS, MINUS ;
precedence left PRODUCT, DIVIDE ;
precedence nonassoc NOT ;
precedence left DOT, LEFT_BRACKET, RIGHT_BRACKET, LEFT_PAR, RIGHT_PAR ;
precedence right ELSE;

start with pascalProgram;

pascalProgram::=
								PROGRAM:pro ID:id programHeading:ph SEMICOLON:sc block:b DOT:dt {:
									  PascalProgram r = new PascalProgram((String) pro, (String) id, ph, (String) sc, b, (String) dt);
									  RESULT = r;
									  parser.root = RESULT;
									  :}
							;


programHeading::=
								LEFT_PAR:lpar identifierList:il RIGHT_PAR:rpar {:
									ProgramHeading r = new ProgramHeading((String) lpar, (String) rpar, il);
									RESULT = r;
									  :}
							;


identifierList::=
								ID:id {:
									IdentifierList r = new IdentifierList((String) id);
									RESULT = r;
									:}
							|
								identifierList:il COMMA:c ID:id {:
									IdentifierList r = new IdentifierList((String) id, (String) c, il);
									RESULT = r;
									:}
							;


block::=
								labelDeclaration:d SEMICOLON:sc block1:b  {:
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									:}
							|
								block1:b {:
									Block r = new Block(b);
									RESULT = r;
									:}
							;

block1::=
								constantDeclaration:d SEMICOLON:sc block2:b {:
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									:}
							|
								block2:b {:
									Block r = new Block(b);
									RESULT = r;
									:}
							;

block2::=
								typeDeclaration:d SEMICOLON:sc block3:b {:
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									:}
							|
								block3:b {:
									Block r = new Block(b);
									RESULT = r;
									:}
							;

block3::=
								variableDeclaration:d SEMICOLON:sc block4:b {:
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  :}
							|
								block4:b {:
									Block r = new Block(b);
									RESULT = r;
									:}
							;

block4::=
								procAndFuncDeclaration:d SEMICOLON:sc block5:b {:
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  :}
							|
								block5:b {:
									Block r = new Block(b);
									RESULT = r;
									:}
							;

block5::=
								BEGIN:b statementList:sl END:e {:
									Block r = new Block(sl, (String) b, (String) e);
									RESULT = r;
									:}
							;


labelDeclaration::=
								label:l INTEGER:i  {:
									LabelDeclaration r = new LabelDeclaration(l, (String) i);
									RESULT = r;
									:}
							|
								labelDeclaration:ld COMMA:c INTEGER:i  {:
									LabelDeclaration r = new LabelDeclaration(ld, (String) i, (String) c);
									RESULT = r;
									:}
							;


constantDeclaration::=
							   CONST:c ID:id EQUALS:eq constant:cons  {:
							   		ConstantDeclaration r = new ConstantDeclaration((String) c, (String) id, (String) eq, cons);
							   		RESULT = r;
									:}
							|
							   constantDeclaration:cd SEMICOLON:sc ID:id EQUALS:eq constant:cons  {:
							   		ConstantDeclaration r = new ConstantDeclaration((String) id, (String) eq, (String) sc, cons, cd);
							   		RESULT = r;
									:}
							;


typeDeclaration::=
							   type:tl ID:id EQUALS:e type:tr {:
								   	TypeDeclaration r = new TypeDeclaration((String) id, (String) e, tl, tr);
								   	RESULT = r;
									:}
							|
							   typeDeclaration:td SEMICOLON:sc ID:id EQUALS:e type:t {:
							   		TypeDeclaration r = new TypeDeclaration((String) id, (String) e, (String) sc, t, td);
								   	RESULT = r;
									:}
							;


variableDeclaration::=
							   VAR:var variableidList:vil COLON:c type:t {:
							   		VariableDeclaration r = new VariableDeclaration((String) var, (String) c, vil, t);
							   		RESULT = r;
									:}
							|
							   variableDeclaration:vd SEMICOLON:sc variableidList:vil COLON:c type:t  {:
							   		VariableDeclaration r = new VariableDeclaration((String) c, (String) sc, vil, vd,t);
							   		RESULT = r;
									:}
							;

variableidList::=
							   ID:id {:
								   	VariableIdList r = new VariableIdList((String) id);
								   	RESULT = r;
									:}
							|
							   variableidList:vil COMMA:c  ID:id  {:
							   		VariableIdList r = new VariableIdList((String) id, (String) c, vil);
								   	RESULT = r;
									:}
							;

constant::=
								INTEGER:c {:
									Constant r = new Constant((String) c);
									RESULT = r;
;									:}
							|
								STRING:c {:
									Constant r = new Constant((String) c);
									RESULT = r;
									:}
							;


type::=
								simpleType:st  {:
									Type r = new Type(st);
									RESULT = r;
									:}
							|
								structuredType:st  {:
									Type r = new Type(st);
									RESULT = r;
									:}
							|
								constant:st  {:
									Type r = new Type(st);
									RESULT = r;
									:}
							;


simpleType::=
								LEFT_PAR:lpar  identifierList:il RIGHT_PAR:rpar  {:
									SimpleType r = new SimpleType((String) lpar, (String) rpar, il);
									RESULT = r;
									:}
							|
							/*  constant ... constant  {:
									:}
							| */
								ID:id {:
									SimpleType r = new SimpleType((String) id);
									RESULT = r;
									:}
							;


structuredType::=
								ARRAY:arr LEFT_BRACKET:lbra indexList:il RIGHT_BRACKET:rbra OF:of type:ty  {:
									StructuredType r = new StructuredType((String) arr, (String) lbra, (String) rbra, (String) of, il, ty);
									RESULT = r;
									:}
							|
								RECORD:rec fieldList:fl END:e  {:
									StructuredType r = new StructuredType((String) e, (String) rec, fl);
									RESULT = r;
									:}
							|
								SET:s OF:o simpleType:st  {:
									StructuredType r = new StructuredType((String) o, (String) s, st);
									RESULT = r;
									:}
							|
								FILE:f OF:o type:t  {:
									StructuredType r = new StructuredType((String) o, (String) f, t);
									RESULT = r;
									:}
							|
								PACKED:p structuredType:st  {:
									StructuredType r = new StructuredType((String) p, st);
									RESULT = r;
									:}
							;


indexList::=
								simpleType:st  {:
									IndexList r = new IndexList(st);
									RESULT = r;
									:}
							|
								indexList:il COMMA:comma simpleType:st  {:
									IndexList r = new IndexList(il, (String) comma, st);
									RESULT = r;
									:}
							;


fieldList::=
								fixedPart:fp  {:
									FieldList r = new FieldList(fp);
									RESULT = r;
									:}
							|
								fixedPart:fp SEMICOLON:sc variantPart:vp {:
									FieldList r = new FieldList(fp, (String) sc, vp);
									RESULT = r;
									:}
							|
								variantPart:vp {:
									FieldList r = new FieldList(vp);
									RESULT = r;
									:}
							;


fixedPart::=
								recordField:rf {:
									FixedPart r = new FixedPart(rf);
									RESULT = r;
									:}
							|
								fixedPart:fp SEMICOLON:sc recordField:rf {:
									FixedPart r = new FixedPart(fp, (String) sc, rf);
									RESULT = r;
									:}
							;


recordField::=
								empty {:
									RESULT = null;
									:}
							|
								fieldidList:fl COLON:colon type:type {:
									RecordField r = new RecordField(fl, (String) colon, type);
									RESULT = r;
									:}
							;


fieldidList::=
								ID:id {:
									FieldIdList r = new FieldIdList((String) id);
									RESULT = r;
									:}
							|
								fieldidList:fl COMMA:comma ID:id  {:
									FieldIdList r = new FieldIdList(fl, (String) comma, (String) id);
									RESULT = r;
									:}
							;


variantPart::=
								CASE:caseexp tagField:tf OF:of variantList:vl {:
									VariantPart r = new VariantPart((String) caseexp, tf, (String) of, vl);
									RESULT = r;
									:}
							;


tagField::=
								ID:id  {:
									TagField r = new TagField((String) id);
									RESULT = r;
									:}
							|
								ID:idl COLON:colon ID:idr  {:
									TagField r = new TagField((String) idl, (String) idr, (String) colon);
									RESULT = r;
									:}
							;


variantList::=
								variant:vari {:
									VariantList r = new VariantList(vari);
									RESULT = r;
									:}
							|
								variantList:vl SEMICOLON:sc variant:vari {:
									VariantList r = new VariantList(vari, (String) sc, vl);
									RESULT = r;
									:}
							;


variant::=
								empty {:
									RESULT = null;
									:}
							|
								caseLabelList:cll COLON:colon LEFT_PAR:lpar fieldList:fl RIGHT_PAR:rpar {:
									Variant r = new Variant(cll, (String) colon, (String) lpar, fl, (String) rpar);
									RESULT = r;
									:}
							;


caseLabelList::=
								constant:c {:
									CaseLabelList r = new CaseLabelList(c);
									RESULT = r;
									:}
							|
								caseLabelList:cll COMMA:comma constant:con  {:
									CaseLabelList r = new CaseLabelList(cll, (String) comma, con);
									RESULT = r;
									:}
							;


procAndFuncDeclaration::=
								procOrFunc:pof  {:
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pof);
									RESULT = r;
									:}
							|
								procAndFuncDeclaration:pafd SEMICOLON:sc procOrFunc:pof {:
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pafd, (String) sc, pof);
									RESULT = r;
									:}
							;


procOrFunc::=
								PROCEDURE:proc ID:id parameters:par blockOrForward:blo {:
									ProcOrFunc r = new ProcOrFunc((String) proc, (String) id, par, blo);
									RESULT = r;
									:}
							|
								FUNCTION:func ID:idl parameters:par COLON:colon ID:idr blockOrForward:bof {:
									ProcOrFunc r = new ProcOrFunc((String) func, (String) idl, (String) idr, par, bof, (String) colon);
									RESULT = r;
									:}
							;


blockOrForward::=
								SEMICOLON:sc block:bl {:
									BlockOrForward r = new BlockOrForward((String) sc, bl);
									RESULT = r;
									:}
							|
								SEMICOLON:sc FORWARD:fw {:
									BlockOrForward r = new BlockOrForward((String) sc, (String) fw);
									RESULT = r;
									:}
							;


parameters::=
								LEFT_PAR:lpar formalParameterList:fpl RIGHT_PAR:rpar {:
									Parameters r = new Parameters((String) lpar, fpl, (String) rpar);
									RESULT = r;
									:}
							;


formalParameterList::=
								formalParameterSection:fps {:
									FormalParameterList r = new FormalParameterList(fps);
									RESULT = r;
									:}
							|
								formalParameterList:fpl SEMICOLON:sc formalParameterSection:fps {:
									FormalParameterList r = new FormalParameterList(fpl, (String) sc, fps);
									RESULT = r;
									:}
							;


formalParameterSection::=
								parameteridList:pil COLON:colon ID:id {:
									FormalParameterSection r = new FormalParameterSection(pil, (String) colon, (String) id);
									RESULT = r;
									:}
							|
								VAR:var parameteridList:pil COLON:colon ID:id  {:
									FormalParameterSection r = new FormalParameterSection((String) var, pil, (String) colon, (String) id);
									RESULT = r;
									:}
							|
								PROCEDURE:proc ID:id parameters:params {:
									FormalParameterSection r = new FormalParameterSection((String) proc, (String) id, params);
									RESULT = r;
									:}
							|
								FUNCTION:func ID:idl parameters:params COLON:colon ID:idr {:
									FormalParameterSection r = new FormalParameterSection((String) func, (String) idl, params, (String) colon, (String) idr);
									RESULT = r;
									:}
							;


parameteridList::=
								ID:id  {:
									ParameterIdList r = new ParameterIdList((String)id);
									RESULT = r;
									:}
							|
								parameteridList:pl COMMA:c ID:id  {:
									ParameterIdList r = new ParameterIdList(pl, (String)c, (String)id);
									RESULT = r;
									:}
							;


statementList::=
								statement:stm {:
									StatementList r = new StatementList(stm);
									RESULT = r;
										:}
							|
								statementList:sl SEMICOLON:sc statement:stm  {:
									StatementList r = new StatementList(sl, (String)sc, stm);
									RESULT = r;
									:}
							;


statement::=
								IF:ifexp expression:exp THEN:then statement:e ELSE:elseexp statement:f  {:
									Statement r = new Statement((String)ifexp, exp, (String)then, e, (String)elseexp, f);
									RESULT = r;
									:}
							|
								ID:id LEFT_PAR:lpar expressionList:el RIGHT_PAR:rpar{:
									Statement r = new Statement((String)id, (String)lpar, el, (String)rpar);
									RESULT = r;
									:}
							|
								WRITE_LN:wln LEFT_PAR:lpar expressionList:el RIGHT_PAR:rpar{:
									Statement r = new Statement((String)wln, (String)lpar, el, (String)rpar);
									RESULT = r;
									:}
							|
								READ_LN:rdl LEFT_PAR:lpar expressionList:el RIGHT_PAR:rpar{:
									Statement r = new Statement((String)rdl, (String)lpar, el, (String)rpar);
									RESULT = r;
									:}
							|
								REPEAT:rpt statementList:sl UNTIL:until expression:exp {:
									Statement r = new Statement((String)rpt, sl, (String)until, exp);
									RESULT = r;
									:}
							|
								FOR:forexp ID:id ASIGN:asign forList:fl DO:doexp statement:stm  {:
									Statement r = new Statement((String)forexp, (String)id, (String)asign, fl, (String)doexp, stm);
									RESULT = r;
									:}
							|
								WITH:with recordVariableList:rvl DO:doexp statement:stm  {:
									Statement r = new Statement((String)with, rvl, (String)doexp, stm);
									RESULT = r;
									:}
							|
								CASE:caseexp expression:exp OF:of caseList:cl END:endexp {:
									Statement r = new Statement((String) caseexp, exp, (String)of, cl, (String)endexp);
									RESULT = r;
									:}
							|
								WHILE:whileexp expression:exp DO:doexp statement:stm  {:
									Statement r = new Statement((String)whileexp, exp, (String)doexp, stm);
									RESULT = r;
									:}
							|
								IF:ifexp expression:exp THEN:then statement:stm {:
									Statement r = new Statement((String)ifexp, exp, (String)then, stm);
									RESULT = r;
									:}
							|
								variable:var expression:exp SEMICOLON:sc {:
									Statement r = new Statement(var, exp, (String)sc);
									RESULT = r;
									:}
							|
								BEGIN:beg statementList:sl END:end  {:
									Statement r = new Statement((String)beg, sl, (String)end);
									RESULT = r;
									:}
							|
								label:lb COLON:c statement:stm  {:
									Statement r = new Statement(lb, (String)c, stm);
									RESULT = r;
									:}
							|
								ID:id {:
									Statement r = new Statement((String)id);
									RESULT = r;
									:}
							|
								empty  {:
									RESULT = null;
									:}
							;


variable::=
								ID:id LEFT_BRACKET:lb subscriptList:sl RIGHT_BRACKET:rb  {:
									Variable r = new Variable((String) id, (String) lb, (String) rb, sl);
									RESULT = r;
									:}
							|
								ID:idl DOT:d ID:idr  {:
									Variable r = new Variable((String) idl, (String) idr, (String) d);
									RESULT = r;
									:}
							|
								ID:id ASIGN:a {:
									Variable r = new Variable((String) id, (String) a);
									RESULT = r;
									:}
							;


subscriptList::=
								expression:e {:
									SubscriptList r = new SubscriptList(e);
									RESULT = r;
									:}
							|
								subscriptList:sl COMMA:s expression:e  {:
									SubscriptList r = new SubscriptList(sl, (String) s, e);
									RESULT = r;
									:}
							;


caseList::=
								caseLabelList:cll COLON:s statement:stm  {:
									CaseList r = new CaseList(cll, (String) s, stm);
									RESULT = r;
									:}
							|
								caseList:cl SEMICOLON:sc caseLabelList:cll COLON:c statement:stm  {:
									CaseList r = new CaseList(cll, (String) sc, (String) c, stm, cl);
									RESULT = r;
									:}
							;


forList::=
								expression:exl TO:s expression:exr  {:
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									:}
							|
								expression:exl DOWNTO:s expression:exr  {:
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									:}
							;


expressionList::=
								expression:ex  {:
									ExpressionList r = new ExpressionList(ex);
									RESULT = r;
									:}
							|
								expressionList:el COMMA:s expression:ex  {:
									ExpressionList r = new ExpressionList(el, (String) s, ex);
									RESULT = r;
									:}
							;


label::=
								INTEGER:s{:
									Label r = new Label((String) s);
									RESULT = r;
									:}
							;


recordVariableList::=
								variable:v  {:
									RecordVariableList r = new RecordVariableList(v);
									RESULT = r;
									:}
							|
								recordVariableList:rvl COMMA:s variable:v  {:
									RecordVariableList r = new RecordVariableList(rvl, (String) s, v);
									RESULT = r;
									:}
							;


expression::=
								expression:ex relationalOp:ro additiveExpression:ae {:
									Expression r = new Expression(ex, ro, ae);
									RESULT = r;
									:}
							|
								additiveExpression:ae {:
									Expression r = new Expression(ae);
									RESULT = r;
									:}
							|
								INT_CONST:s {:
									Expression r = new Expression((String) s);
									RESULT = r;
									:}
							|
								error {:
									System.out.println("expression error");
									:}
							;


relationalOp::=
								LESS_THAN:s  {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							|
								LESS_EQUAL:s {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							|
								EQUALS:s {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							|
								NOT_EQUAL:s {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							|
								GREATER_EQUALS:s {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							|
								GREATER_THAN:s {:
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									:}
							;


additiveExpression::=
								additiveExpression:ae additiveOp:ao multiplicativeExpression:me {:
									AdditiveExpression r = new AdditiveExpression(ae, ao, me);
									RESULT = r;
									:}
							|
								multiplicativeExpression:me  {:
									AdditiveExpression r = new AdditiveExpression(me);
									RESULT = r;
									:}
							;


additiveOp::=
								PLUS:s {:
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									:}
						   |
								MINUS:s {:
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									:}
						   |
								OR:s {:
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									:}
							;


multiplicativeExpression::=
								multiplicativeExpression:me multiplicativeOp:mo unaryExpression:ue {:
									MultiplicativeExpression r = new MultiplicativeExpression(me, mo, ue);
									RESULT = r;
									:}
							|
								unaryExpression:ue  {:
									MultiplicativeExpression r = new MultiplicativeExpression(ue);
									RESULT = r;
									:}
							;


multiplicativeOp::=
								PRODUCT:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							|
								DIVIDE:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							|
								DIV:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							|
								MOD:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							|
								AND:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							|
								IN:o {:
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									:}
							;


unaryExpression::=
								unaryOp:uo unaryExpression:ue  {:
									UnaryExpression r = new UnaryExpression(uo, ue);
									RESULT = r;
									:}
							|
								primaryExpression:pe  {:
									UnaryExpression r = new UnaryExpression(pe);
									RESULT = r;
									:}
							;


unaryOp::=
								PLUS:u {:
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									:}
							|
								MINUS:u {:
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									:}
							|
								NOT:u {:
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									:}
							;


primaryExpression::=
								ID:tid LEFT_PAR:lp expressionList:el RIGHT_PAR:rp {:
									PrimaryExpression r = new PrimaryExpression((String) tid, (String) lp, el, (String) rp);
									RESULT = r;
									:}
							|
								LEFT_BRACKET:lb elementList:elm RIGHT_BRACKET:rb {:
									PrimaryExpression r = new PrimaryExpression((String) lb, elm, (String) rb);
									RESULT = r;
									:}
							|
								LEFT_PAR:lp expression:exp RIGHT_PAR:rp  {:
									PrimaryExpression r = new PrimaryExpression((String) lp, exp, (String) rp);
									RESULT = r;
									:}
							|
								NIL:nil  {:
									PrimaryExpression r = new PrimaryExpression((String) nil);
									RESULT = r;
									:}
							|
								INTEGER:integer  {:
									PrimaryExpression r = new PrimaryExpression((String) integer);
									RESULT = r;
									:}
							|
								STRING:string  {:
									PrimaryExpression r = new PrimaryExpression((String) string);
									RESULT = r;
									:}
							|
								variable:var  {:
									PrimaryExpression r = new PrimaryExpression(var);
									RESULT = r;
									:}
							;


elementList::=
								element:e  {:
									ElementList r = new ElementList(e);
									RESULT = r;
									:}
							|
								elementList:el COMMA:c element:e  {:
									ElementList r = new ElementList(e, (String) c, el);
									RESULT = r;
									:}
							;


element::=
								expression:e  {:
									Element r = new Element(e);
									RESULT = r;
									:}
							|
								element:el expression:ex  {:
									Element r = new Element(el, ex);
									RESULT = r;
									:}
							;



empty::=
							;