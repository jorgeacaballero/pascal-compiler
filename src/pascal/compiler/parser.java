
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 25 23:16:42 CST 2017
//----------------------------------------------------

package pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import pascal.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 25 23:16:42 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\007\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\013\004\000\002\013\005" +
    "\000\002\014\006\000\002\014\007\000\002\015\006\000" +
    "\002\015\007\000\002\016\006\000\002\016\007\000\002" +
    "\017\003\000\002\017\005\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\022\003\000\002\023\010\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\004\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\005\000\002\025\003\000\002\026\003" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\030\003\000\002\030\005\000\002\031\006\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\005\000\002\034\003\000\002\034\007\000\002\035\003" +
    "\000\002\035\005\000\002\036\003\000\002\036\005\000" +
    "\002\037\006\000\002\037\010\000\002\040\004\000\002" +
    "\040\004\000\002\041\005\000\002\042\003\000\002\042" +
    "\005\000\002\043\005\000\002\043\006\000\002\043\005" +
    "\000\002\043\007\000\002\044\003\000\002\044\005\000" +
    "\002\045\003\000\002\045\005\000\002\046\010\000\002" +
    "\046\006\000\002\046\010\000\002\046\006\000\002\046" +
    "\006\000\002\046\006\000\002\046\006\000\002\046\010" +
    "\000\002\046\006\000\002\046\007\000\002\046\006\000" +
    "\002\046\006\000\002\046\004\000\002\046\005\000\002" +
    "\046\005\000\002\046\003\000\002\046\003\000\002\047" +
    "\006\000\002\047\005\000\002\047\004\000\002\047\003" +
    "\000\002\050\003\000\002\050\005\000\002\051\005\000" +
    "\002\051\007\000\002\052\005\000\002\052\005\000\002" +
    "\053\003\000\002\053\005\000\002\054\003\000\002\055" +
    "\003\000\002\055\005\000\002\056\005\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\060\005\000\002\060" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\005\000\002\062\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\064\004\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\006\000\002\066\005\000\002\066\005\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\067\003\000\002\067\005\000\002\070" +
    "\003\000\002\070\004\000\002\071\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\004\005\001\002\000\004\002\u0134\001" +
    "\002\000\004\063\006\001\002\000\006\034\007\040\uff6e" +
    "\001\002\000\004\063\145\001\002\000\004\040\ufffe\001" +
    "\002\000\004\040\012\001\002\000\036\005\036\010\050" +
    "\011\045\016\027\024\013\025\044\031\051\034\040\061" +
    "\047\063\033\065\037\066\043\067\022\070\026\001\002" +
    "\000\004\063\u012f\001\002\000\006\040\u012c\042\u012b\001" +
    "\002\000\012\006\uffe3\035\uffe3\040\uffe3\063\uffe3\001\002" +
    "\000\012\006\uffe2\035\uffe2\040\uffe2\063\uffe2\001\002\000" +
    "\004\063\u0128\001\002\000\006\040\ufff2\043\ufff2\001\002" +
    "\000\006\040\ufff4\043\ufff4\001\002\000\004\022\u0126\001" +
    "\002\000\006\040\ufff6\043\ufff6\001\002\000\006\040\ufff8" +
    "\043\ufff8\001\002\000\006\040\ufffa\043\ufffa\001\002\000" +
    "\014\010\050\025\044\066\043\067\022\070\026\001\002" +
    "\000\004\063\u0105\001\002\000\004\061\u0104\001\002\000" +
    "\004\043\u0103\001\002\000\004\040\376\001\002\000\016" +
    "\006\uffe0\035\uffe0\037\uffe0\040\uffe0\042\uffe0\063\uffe0\001" +
    "\002\000\004\040\373\001\002\000\004\040\366\001\002" +
    "\000\034\005\170\006\uff6e\015\155\017\161\032\152\040" +
    "\uff6e\061\154\062\167\063\162\071\165\073\153\100\164" +
    "\101\171\001\002\000\016\006\uffe5\035\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\063\uffe5\001\002\000\004\063\145\001\002" +
    "\000\004\040\140\001\002\000\004\040\uffc6\001\002\000" +
    "\004\022\136\001\002\000\012\006\uff6e\040\uff6e\063\074" +
    "\071\102\001\002\000\004\063\071\001\002\000\012\006" +
    "\uffe4\035\uffe4\040\uffe4\063\uffe4\001\002\000\006\061\uff98" +
    "\063\uffe6\001\002\000\004\036\061\001\002\000\004\063" +
    "\052\001\002\000\006\041\uffe8\042\uffe8\001\002\000\006" +
    "\041\055\042\054\001\002\000\004\063\060\001\002\000" +
    "\024\010\050\025\044\034\040\061\056\063\033\065\037" +
    "\066\043\067\022\070\026\001\002\000\016\006\uffe6\035" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\063\uffe6\001\002\000\004" +
    "\040\uffea\001\002\000\006\041\uffe7\042\uffe7\001\002\000" +
    "\006\034\040\063\033\001\002\000\006\037\065\042\064" +
    "\001\002\000\006\037\uffda\042\uffda\001\002\000\006\034" +
    "\040\063\033\001\002\000\004\022\066\001\002\000\024" +
    "\010\050\025\044\034\040\061\056\063\033\065\037\066" +
    "\043\067\022\070\026\001\002\000\012\006\uffdf\035\uffdf" +
    "\040\uffdf\063\uffdf\001\002\000\006\037\uffd9\042\uffd9\001" +
    "\002\000\004\053\072\001\002\000\006\061\056\065\037" +
    "\001\002\000\004\040\uffee\001\002\000\006\041\uffd1\042" +
    "\uffd1\001\002\000\004\006\135\001\002\000\010\006\uffd8" +
    "\035\uffd8\040\132\001\002\000\010\006\uffd3\035\uffd3\040" +
    "\uffd3\001\002\000\010\006\uffd5\035\uffd5\040\uffd5\001\002" +
    "\000\006\006\uffd6\035\uffd6\001\002\000\004\063\111\001" +
    "\002\000\006\041\105\042\104\001\002\000\004\063\107" +
    "\001\002\000\024\010\050\025\044\034\040\061\056\063" +
    "\033\065\037\066\043\067\022\070\026\001\002\000\010" +
    "\006\uffd2\035\uffd2\040\uffd2\001\002\000\006\041\uffd0\042" +
    "\uffd0\001\002\000\004\022\114\001\002\000\006\022\uffce" +
    "\041\112\001\002\000\004\063\113\001\002\000\004\022" +
    "\uffcd\001\002\000\014\006\uff6e\035\uff6e\040\uff6e\061\056" +
    "\065\037\001\002\000\010\006\uffcf\035\uffcf\040\130\001" +
    "\002\000\010\006\uffcc\035\uffcc\040\uffcc\001\002\000\006" +
    "\041\uffc8\042\uffc8\001\002\000\006\041\123\042\122\001" +
    "\002\000\010\006\uffca\035\uffca\040\uffca\001\002\000\006" +
    "\061\056\065\037\001\002\000\004\034\124\001\002\000" +
    "\012\035\uff6e\040\uff6e\063\074\071\102\001\002\000\004" +
    "\035\126\001\002\000\010\006\uffc9\035\uffc9\040\uffc9\001" +
    "\002\000\006\041\uffc7\042\uffc7\001\002\000\014\006\uff6e" +
    "\035\uff6e\040\uff6e\061\056\065\037\001\002\000\010\006" +
    "\uffcb\035\uffcb\040\uffcb\001\002\000\014\006\uff6e\035\uff6e" +
    "\040\uff6e\063\074\071\102\001\002\000\006\006\uffd7\035" +
    "\uffd7\001\002\000\010\006\uffd4\035\uffd4\040\uffd4\001\002" +
    "\000\012\006\uffde\035\uffde\040\uffde\063\uffde\001\002\000" +
    "\006\034\040\063\033\001\002\000\012\006\uffdd\035\uffdd" +
    "\040\uffdd\063\uffdd\001\002\000\034\005\036\010\050\016" +
    "\027\024\013\025\044\031\051\034\040\061\056\063\142" +
    "\065\037\066\043\067\022\070\026\001\002\000\006\040" +
    "\ufff9\043\ufff9\001\002\000\006\053\143\063\uffe0\001\002" +
    "\000\006\061\056\065\037\001\002\000\004\040\uffed\001" +
    "\002\000\006\035\ufffd\042\ufffd\001\002\000\006\035\150" +
    "\042\147\001\002\000\004\063\151\001\002\000\016\006" +
    "\uffe1\035\uffe1\037\uffe1\040\uffe1\042\uffe1\063\uffe1\001\002" +
    "\000\006\035\ufffc\042\ufffc\001\002\000\030\003\230\020" +
    "\216\021\214\034\224\036\227\045\211\046\226\061\232" +
    "\063\220\065\223\103\222\001\002\000\034\005\170\015" +
    "\155\017\161\032\152\040\uff6e\061\154\062\167\063\162" +
    "\071\165\073\153\074\uff6e\100\164\101\171\001\002\000" +
    "\004\041\uff98\001\002\000\004\063\346\001\002\000\030" +
    "\003\230\020\216\021\214\034\224\036\227\045\211\046" +
    "\226\061\232\063\220\065\223\103\222\001\002\000\006" +
    "\006\344\040\176\001\002\000\012\006\uffa5\014\uffa5\040" +
    "\uffa5\074\uffa5\001\002\000\030\003\230\020\216\021\214" +
    "\034\224\036\227\045\211\046\226\061\232\063\220\065" +
    "\223\103\222\001\002\000\044\003\uffa1\006\uffa6\014\uffa6" +
    "\020\uffa1\021\uffa1\034\334\036\205\040\uffa6\043\206\044" +
    "\204\045\uffa1\046\uffa1\061\uffa1\063\uffa1\065\uffa1\074\uffa6" +
    "\103\uffa1\001\002\000\010\006\uffb7\040\uffb7\074\uffb7\001" +
    "\002\000\004\034\324\001\002\000\030\003\230\020\216" +
    "\021\214\034\224\036\227\045\211\046\226\061\232\063" +
    "\220\065\223\103\222\001\002\000\004\041\307\001\002" +
    "\000\004\063\202\001\002\000\034\005\170\006\uff6e\015" +
    "\155\017\161\032\152\040\uff6e\061\154\062\167\063\162" +
    "\071\165\073\153\100\164\101\171\001\002\000\004\034" +
    "\172\001\002\000\004\063\173\001\002\000\004\035\174" +
    "\001\002\000\012\006\uffb0\014\uffb0\040\uffb0\074\uffb0\001" +
    "\002\000\006\006\177\040\176\001\002\000\036\005\170" +
    "\006\uff6e\015\155\017\161\032\152\040\uff6e\061\154\062" +
    "\167\063\162\071\165\073\153\074\uff6e\100\164\101\171" +
    "\001\002\000\012\006\uffa8\014\uffa8\040\uffa8\074\uffa8\001" +
    "\002\000\010\006\uffb6\040\uffb6\074\uffb6\001\002\000\006" +
    "\013\304\042\303\001\002\000\014\013\uffa1\036\205\042" +
    "\uffa1\043\206\044\204\001\002\000\006\013\uff97\042\uff97" +
    "\001\002\000\112\003\uffa2\006\uffa2\007\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\074\uffa2\103\uffa2\001\002" +
    "\000\030\003\230\020\216\021\214\034\224\036\227\045" +
    "\211\046\226\061\232\063\220\065\223\103\222\001\002" +
    "\000\004\063\207\001\002\000\112\003\uffa3\006\uffa3\007" +
    "\uffa3\012\uffa3\013\uffa3\014\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\026\uffa3\027\uffa3\030\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\061\uffa3\063\uffa3\064\uffa3\065\uffa3\074\uffa3" +
    "\103\uffa3\001\002\000\006\037\301\042\300\001\002\000" +
    "\024\020\uff7c\021\uff7c\034\uff7c\036\uff7c\045\uff7c\046\uff7c" +
    "\061\uff7c\063\uff7c\065\uff7c\001\002\000\024\020\216\021" +
    "\214\034\224\036\227\045\211\046\226\061\232\063\220" +
    "\065\223\001\002\000\112\003\uff7d\006\uff7d\007\uff7d\012" +
    "\uff7d\013\uff7d\014\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\026\uff7d\027\uff7d\030\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\042\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\063\uff7d\064\uff7d\065\uff7d\074\uff7d\103\uff7d" +
    "\001\002\000\024\020\uff7a\021\uff7a\034\uff7a\036\uff7a\045" +
    "\uff7a\046\uff7a\061\uff7a\063\uff7a\065\uff7a\001\002\000\076" +
    "\003\uff94\006\uff94\013\uff94\014\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\251\026\uff94\027\uff94\030\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\042\uff94\045\246\046\247\053" +
    "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\063\uff94\065\uff94\074\uff94\103\uff94\001\002\000\112\003" +
    "\uff76\006\uff76\007\uff76\012\uff76\013\uff76\014\uff76\020\uff76" +
    "\021\uff76\022\uff76\023\uff76\026\uff76\027\uff76\030\uff76\034" +
    "\uff76\035\uff76\036\uff76\037\uff76\040\uff76\042\uff76\045\uff76" +
    "\046\uff76\047\uff76\050\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\056\uff76\057\uff76\060\uff76\061\uff76\063\uff76\064\uff76" +
    "\065\uff76\074\uff76\103\uff76\001\002\000\112\003\uff85\006" +
    "\uff85\007\uff85\012\uff85\013\uff85\014\uff85\020\uff85\021\uff85" +
    "\022\uff85\023\uff85\026\uff85\027\uff85\030\uff85\034\uff85\035" +
    "\uff85\036\uff85\037\uff85\040\uff85\042\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\063\uff85\064\uff85\065\uff85" +
    "\074\uff85\103\uff85\001\002\000\116\003\uffa1\006\uffa1\007" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\026\uffa1\027\uffa1\030\uffa1\034\271\035\uffa1\036" +
    "\205\037\uffa1\040\uffa1\042\uffa1\043\206\044\204\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\074\uffa1\103\uffa1\001\002\000\112\003\uff8a\006" +
    "\uff8a\007\255\012\257\013\uff8a\014\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\026\uff8a\027\uff8a\030\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\042\uff8a\045\uff8a\046\uff8a" +
    "\047\260\050\256\052\254\053\uff8a\054\uff8a\055\uff8a\056" +
    "\uff8a\057\uff8a\060\uff8a\061\uff8a\063\uff8a\064\253\065\uff8a" +
    "\074\uff8a\103\uff8a\001\002\000\074\003\uff93\006\uff93\013" +
    "\uff93\014\uff93\020\uff93\021\uff93\022\uff93\026\uff93\027\uff93" +
    "\030\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\uff93\045\uff93\046\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\063\uff93\065\uff93\074\uff93\103" +
    "\uff93\001\002\000\112\003\uff74\006\uff74\007\uff74\012\uff74" +
    "\013\uff74\014\uff74\020\uff74\021\uff74\022\uff74\023\uff74\026" +
    "\uff74\027\uff74\030\uff74\034\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\042\uff74\045\uff74\046\uff74\047\uff74\050\uff74\052" +
    "\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74" +
    "\061\uff74\063\uff74\064\uff74\065\uff74\074\uff74\103\uff74\001" +
    "\002\000\030\003\230\020\216\021\214\034\224\036\227" +
    "\045\211\046\226\061\232\063\220\065\223\103\222\001" +
    "\002\000\022\037\uffa0\042\uffa0\053\240\054\236\055\241" +
    "\056\237\057\242\060\244\001\002\000\024\020\uff7b\021" +
    "\uff7b\034\uff7b\036\uff7b\045\uff7b\046\uff7b\061\uff7b\063\uff7b" +
    "\065\uff7b\001\002\000\030\003\230\020\216\021\214\034" +
    "\224\036\227\045\211\046\226\061\232\063\220\065\223" +
    "\103\222\001\002\000\074\003\uff92\006\uff92\013\uff92\014" +
    "\uff92\020\uff92\021\uff92\022\uff92\026\uff92\027\uff92\030\uff92" +
    "\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\042\uff92\045" +
    "\uff92\046\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\061\uff92\063\uff92\065\uff92\074\uff92\103\uff92\001" +
    "\002\000\112\003\uff73\006\uff73\007\uff73\012\uff73\013\uff73" +
    "\014\uff73\020\uff73\021\uff73\022\uff73\023\uff73\026\uff73\027" +
    "\uff73\030\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73" +
    "\042\uff73\045\uff73\046\uff73\047\uff73\050\uff73\052\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73" +
    "\063\uff73\064\uff73\065\uff73\074\uff73\103\uff73\001\002\000" +
    "\112\003\uff75\006\uff75\007\uff75\012\uff75\013\uff75\014\uff75" +
    "\020\uff75\021\uff75\022\uff75\023\uff75\026\uff75\027\uff75\030" +
    "\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75\042\uff75" +
    "\045\uff75\046\uff75\047\uff75\050\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\063\uff75" +
    "\064\uff75\065\uff75\074\uff75\103\uff75\001\002\000\034\003" +
    "\230\020\216\021\214\034\224\036\227\037\uff72\042\uff72" +
    "\045\211\046\226\061\232\063\220\065\223\103\222\001" +
    "\002\000\006\037\264\042\263\001\002\000\050\003\uff70" +
    "\020\uff70\021\uff70\034\uff70\036\uff70\037\uff70\042\uff70\045" +
    "\uff70\046\uff70\053\240\054\236\055\241\056\237\057\242" +
    "\060\244\061\uff70\063\uff70\065\uff70\103\uff70\001\002\000" +
    "\024\020\uff8e\021\uff8e\034\uff8e\036\uff8e\045\uff8e\046\uff8e" +
    "\061\uff8e\063\uff8e\065\uff8e\001\002\000\024\020\uff91\021" +
    "\uff91\034\uff91\036\uff91\045\uff91\046\uff91\061\uff91\063\uff91" +
    "\065\uff91\001\002\000\024\020\uff8f\021\uff8f\034\uff8f\036" +
    "\uff8f\045\uff8f\046\uff8f\061\uff8f\063\uff8f\065\uff8f\001\002" +
    "\000\024\020\uff8c\021\uff8c\034\uff8c\036\uff8c\045\uff8c\046" +
    "\uff8c\061\uff8c\063\uff8c\065\uff8c\001\002\000\024\020\uff8d" +
    "\021\uff8d\034\uff8d\036\uff8d\045\uff8d\046\uff8d\061\uff8d\063" +
    "\uff8d\065\uff8d\001\002\000\024\020\216\021\214\034\224" +
    "\036\227\045\211\046\226\061\232\063\220\065\223\001" +
    "\002\000\024\020\uff90\021\uff90\034\uff90\036\uff90\045\uff90" +
    "\046\uff90\061\uff90\063\uff90\065\uff90\001\002\000\076\003" +
    "\uff95\006\uff95\013\uff95\014\uff95\020\uff95\021\uff95\022\uff95" +
    "\023\251\026\uff95\027\uff95\030\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\042\uff95\045\246\046\247\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\063" +
    "\uff95\065\uff95\074\uff95\103\uff95\001\002\000\024\020\uff89" +
    "\021\uff89\034\uff89\036\uff89\045\uff89\046\uff89\061\uff89\063" +
    "\uff89\065\uff89\001\002\000\024\020\uff88\021\uff88\034\uff88" +
    "\036\uff88\045\uff88\046\uff88\061\uff88\063\uff88\065\uff88\001" +
    "\002\000\024\020\216\021\214\034\224\036\227\045\211" +
    "\046\226\061\232\063\220\065\223\001\002\000\024\020" +
    "\uff87\021\uff87\034\uff87\036\uff87\045\uff87\046\uff87\061\uff87" +
    "\063\uff87\065\uff87\001\002\000\112\003\uff8b\006\uff8b\007" +
    "\255\012\257\013\uff8b\014\uff8b\020\uff8b\021\uff8b\022\uff8b" +
    "\023\uff8b\026\uff8b\027\uff8b\030\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\037\uff8b\040\uff8b\042\uff8b\045\uff8b\046\uff8b\047\260" +
    "\050\256\052\254\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057" +
    "\uff8b\060\uff8b\061\uff8b\063\uff8b\064\253\065\uff8b\074\uff8b" +
    "\103\uff8b\001\002\000\024\020\uff7f\021\uff7f\034\uff7f\036" +
    "\uff7f\045\uff7f\046\uff7f\061\uff7f\063\uff7f\065\uff7f\001\002" +
    "\000\024\020\uff81\021\uff81\034\uff81\036\uff81\045\uff81\046" +
    "\uff81\061\uff81\063\uff81\065\uff81\001\002\000\024\020\uff80" +
    "\021\uff80\034\uff80\036\uff80\045\uff80\046\uff80\061\uff80\063" +
    "\uff80\065\uff80\001\002\000\024\020\uff84\021\uff84\034\uff84" +
    "\036\uff84\045\uff84\046\uff84\061\uff84\063\uff84\065\uff84\001" +
    "\002\000\024\020\uff82\021\uff82\034\uff82\036\uff82\045\uff82" +
    "\046\uff82\061\uff82\063\uff82\065\uff82\001\002\000\024\020" +
    "\uff83\021\uff83\034\uff83\036\uff83\045\uff83\046\uff83\061\uff83" +
    "\063\uff83\065\uff83\001\002\000\024\020\216\021\214\034" +
    "\224\036\227\045\211\046\226\061\232\063\220\065\223" +
    "\001\002\000\112\003\uff86\006\uff86\007\uff86\012\uff86\013" +
    "\uff86\014\uff86\020\uff86\021\uff86\022\uff86\023\uff86\026\uff86" +
    "\027\uff86\030\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\042\uff86\045\uff86\046\uff86\047\uff86\050\uff86\052\uff86" +
    "\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061" +
    "\uff86\063\uff86\064\uff86\065\uff86\074\uff86\103\uff86\001\002" +
    "\000\030\003\230\020\216\021\214\034\224\036\227\045" +
    "\211\046\226\061\232\063\220\065\223\103\222\001\002" +
    "\000\112\003\uff78\006\uff78\007\uff78\012\uff78\013\uff78\014" +
    "\uff78\020\uff78\021\uff78\022\uff78\023\uff78\026\uff78\027\uff78" +
    "\030\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\042" +
    "\uff78\045\uff78\046\uff78\047\uff78\050\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\063" +
    "\uff78\064\uff78\065\uff78\074\uff78\103\uff78\001\002\000\034" +
    "\003\230\020\216\021\214\034\224\036\227\037\uff71\042" +
    "\uff71\045\211\046\226\061\232\063\220\065\223\103\222" +
    "\001\002\000\050\003\uff6f\020\uff6f\021\uff6f\034\uff6f\036" +
    "\uff6f\037\uff6f\042\uff6f\045\uff6f\046\uff6f\053\240\054\236" +
    "\055\241\056\237\057\242\060\244\061\uff6f\063\uff6f\065" +
    "\uff6f\103\uff6f\001\002\000\020\035\270\053\240\054\236" +
    "\055\241\056\237\057\242\060\244\001\002\000\112\003" +
    "\uff77\006\uff77\007\uff77\012\uff77\013\uff77\014\uff77\020\uff77" +
    "\021\uff77\022\uff77\023\uff77\026\uff77\027\uff77\030\uff77\034" +
    "\uff77\035\uff77\036\uff77\037\uff77\040\uff77\042\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\052\uff77\053\uff77\054\uff77\055" +
    "\uff77\056\uff77\057\uff77\060\uff77\061\uff77\063\uff77\064\uff77" +
    "\065\uff77\074\uff77\103\uff77\001\002\000\030\003\230\020" +
    "\216\021\214\034\224\036\227\045\211\046\226\061\232" +
    "\063\220\065\223\103\222\001\002\000\006\035\275\042" +
    "\274\001\002\000\022\035\uff9a\042\uff9a\053\240\054\236" +
    "\055\241\056\237\057\242\060\244\001\002\000\030\003" +
    "\230\020\216\021\214\034\224\036\227\045\211\046\226" +
    "\061\232\063\220\065\223\103\222\001\002\000\112\003" +
    "\uff79\006\uff79\007\uff79\012\uff79\013\uff79\014\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\026\uff79\027\uff79\030\uff79\034" +
    "\uff79\035\uff79\036\uff79\037\uff79\040\uff79\042\uff79\045\uff79" +
    "\046\uff79\047\uff79\050\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\060\uff79\061\uff79\063\uff79\064\uff79" +
    "\065\uff79\074\uff79\103\uff79\001\002\000\022\035\uff99\042" +
    "\uff99\053\240\054\236\055\241\056\237\057\242\060\244" +
    "\001\002\000\112\003\uff7e\006\uff7e\007\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\042\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\052\uff7e" +
    "\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\074\uff7e\103\uff7e\001\002" +
    "\000\030\003\230\020\216\021\214\034\224\036\227\045" +
    "\211\046\226\061\232\063\220\065\223\103\222\001\002" +
    "\000\112\003\uffa4\006\uffa4\007\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\026\uffa4\027\uffa4" +
    "\030\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\074\uffa4\103\uffa4\001\002\000\022" +
    "\037\uff9f\042\uff9f\053\240\054\236\055\241\056\237\057" +
    "\242\060\244\001\002\000\004\063\202\001\002\000\040" +
    "\005\170\006\uff6e\014\uff6e\015\155\017\161\032\152\040" +
    "\uff6e\061\154\062\167\063\162\071\165\073\153\074\uff6e" +
    "\100\164\101\171\001\002\000\012\006\uffad\014\uffad\040" +
    "\uffad\074\uffad\001\002\000\006\013\uff96\042\uff96\001\002" +
    "\000\040\005\170\006\uff6e\014\uff6e\015\155\017\161\032" +
    "\152\040\uff6e\061\154\062\167\063\162\071\165\073\153" +
    "\074\uff6e\100\164\101\171\001\002\000\012\006\uffa7\014" +
    "\uffa7\040\uffa7\074\uffa7\001\002\000\020\022\312\053\240" +
    "\054\236\055\241\056\237\057\242\060\244\001\002\000" +
    "\006\061\056\065\037\001\002\000\006\041\322\042\122" +
    "\001\002\000\006\006\316\040\315\001\002\000\006\061" +
    "\056\065\037\001\002\000\012\006\uffac\014\uffac\040\uffac" +
    "\074\uffac\001\002\000\006\041\320\042\122\001\002\000" +
    "\034\005\170\006\uff6e\015\155\017\161\032\152\040\uff6e" +
    "\061\154\062\167\063\162\071\165\073\153\100\164\101" +
    "\171\001\002\000\006\006\uff9d\040\uff9d\001\002\000\034" +
    "\005\170\006\uff6e\015\155\017\161\032\152\040\uff6e\061" +
    "\154\062\167\063\162\071\165\073\153\100\164\101\171" +
    "\001\002\000\006\006\uff9e\040\uff9e\001\002\000\006\063" +
    "\325\110\326\001\002\000\004\035\333\001\002\000\006" +
    "\035\330\042\327\001\002\000\004\063\331\001\002\000" +
    "\012\006\uffb2\014\uffb2\040\uffb2\074\uffb2\001\002\000\004" +
    "\035\332\001\002\000\012\006\uffb3\014\uffb3\040\uffb3\074" +
    "\uffb3\001\002\000\012\006\uffb1\014\uffb1\040\uffb1\074\uffb1" +
    "\001\002\000\030\003\230\020\216\021\214\034\224\036" +
    "\227\045\211\046\226\061\232\063\220\065\223\103\222" +
    "\001\002\000\006\035\336\042\274\001\002\000\012\006" +
    "\uffb4\014\uffb4\040\uffb4\074\uffb4\001\002\000\020\026\340" +
    "\053\240\054\236\055\241\056\237\057\242\060\244\001" +
    "\002\000\040\005\170\006\uff6e\014\uff6e\015\155\017\161" +
    "\032\152\040\uff6e\061\154\062\167\063\162\071\165\073" +
    "\153\074\uff6e\100\164\101\171\001\002\000\012\006\uffaa" +
    "\014\342\040\uffaa\074\uffaa\001\002\000\040\005\170\006" +
    "\uff6e\014\uff6e\015\155\017\161\032\152\040\uff6e\061\154" +
    "\062\167\063\162\071\165\073\153\074\uff6e\100\164\101" +
    "\171\001\002\000\012\006\uffb5\014\uffb5\040\uffb5\074\uffb5" +
    "\001\002\000\006\040\ufff1\043\ufff1\001\002\000\026\006" +
    "\uffa9\014\uffa9\040\uffa9\053\240\054\236\055\241\056\237" +
    "\057\242\060\244\074\uffa9\001\002\000\004\044\347\001" +
    "\002\000\030\003\230\020\216\021\214\034\224\036\227" +
    "\045\211\046\226\061\232\063\220\065\223\103\222\001" +
    "\002\000\004\013\356\001\002\000\022\027\352\030\353" +
    "\053\240\054\236\055\241\056\237\057\242\060\244\001" +
    "\002\000\030\003\230\020\216\021\214\034\224\036\227" +
    "\045\211\046\226\061\232\063\220\065\223\103\222\001" +
    "\002\000\030\003\230\020\216\021\214\034\224\036\227" +
    "\045\211\046\226\061\232\063\220\065\223\103\222\001" +
    "\002\000\020\013\uff9b\053\240\054\236\055\241\056\237" +
    "\057\242\060\244\001\002\000\020\013\uff9c\053\240\054" +
    "\236\055\241\056\237\057\242\060\244\001\002\000\040" +
    "\005\170\006\uff6e\014\uff6e\015\155\017\161\032\152\040" +
    "\uff6e\061\154\062\167\063\162\071\165\073\153\074\uff6e" +
    "\100\164\101\171\001\002\000\012\006\uffae\014\uffae\040" +
    "\uffae\074\uffae\001\002\000\006\040\176\074\361\001\002" +
    "\000\030\003\230\020\216\021\214\034\224\036\227\045" +
    "\211\046\226\061\232\063\220\065\223\103\222\001\002" +
    "\000\026\006\uffaf\014\uffaf\040\uffaf\053\240\054\236\055" +
    "\241\056\237\057\242\060\244\074\uffaf\001\002\000\020" +
    "\013\364\053\240\054\236\055\241\056\237\057\242\060" +
    "\244\001\002\000\040\005\170\006\uff6e\014\uff6e\015\155" +
    "\017\161\032\152\040\uff6e\061\154\062\167\063\162\071" +
    "\165\073\153\074\uff6e\100\164\101\171\001\002\000\012" +
    "\006\uffab\014\uffab\040\uffab\074\uffab\001\002\000\014\005" +
    "\036\016\027\024\013\031\051\063\367\001\002\000\004" +
    "\053\371\001\002\000\006\040\ufff7\043\ufff7\001\002\000" +
    "\024\010\050\025\044\034\040\061\056\063\033\065\037" +
    "\066\043\067\022\070\026\001\002\000\004\040\uffeb\001" +
    "\002\000\010\005\036\016\027\024\013\001\002\000\004" +
    "\040\uffc5\001\002\000\006\040\ufff3\043\ufff3\001\002\000" +
    "\012\005\036\016\027\024\013\063\052\001\002\000\006" +
    "\041\u0101\042\054\001\002\000\006\040\ufff5\043\ufff5\001" +
    "\002\000\024\010\050\025\044\034\040\061\056\063\033" +
    "\065\037\066\043\067\022\070\026\001\002\000\004\040" +
    "\uffe9\001\002\000\004\002\000\001\002\000\006\040\ufff0" +
    "\042\ufff0\001\002\000\004\034\u0106\001\002\000\012\016" +
    "\u0111\024\u0110\031\u010e\063\u010f\001\002\000\004\041\u0108" +
    "\001\002\000\004\063\u0109\001\002\000\004\040\u010a\001" +
    "\002\000\040\005\036\010\050\011\045\016\027\024\013" +
    "\025\044\031\051\034\040\061\047\063\033\065\037\066" +
    "\043\067\022\070\026\072\u010d\001\002\000\004\040\uffc3" +
    "\001\002\000\004\040\uffc2\001\002\000\004\040\uffc1\001" +
    "\002\000\004\063\u010f\001\002\000\006\041\uffb9\042\uffb9" +
    "\001\002\000\004\063\u0120\001\002\000\004\063\u011c\001" +
    "\002\000\006\041\u0119\042\u0118\001\002\000\006\035\u0116" +
    "\040\u0115\001\002\000\006\035\uffbf\040\uffbf\001\002\000" +
    "\012\016\u0111\024\u0110\031\u010e\063\u010f\001\002\000\010" +
    "\035\uffc0\040\uffc0\041\uffc0\001\002\000\006\035\uffbe\040" +
    "\uffbe\001\002\000\004\063\u011b\001\002\000\004\063\u011a" +
    "\001\002\000\006\035\uffbd\040\uffbd\001\002\000\006\041" +
    "\uffb8\042\uffb8\001\002\000\004\034\u0106\001\002\000\004" +
    "\041\u011e\001\002\000\004\063\u011f\001\002\000\006\035" +
    "\uffba\040\uffba\001\002\000\004\034\u0106\001\002\000\006" +
    "\035\uffbb\040\uffbb\001\002\000\006\041\u0123\042\u0118\001" +
    "\002\000\004\063\u0124\001\002\000\006\035\uffbc\040\uffbc" +
    "\001\002\000\012\006\uffdb\035\uffdb\040\uffdb\063\uffdb\001" +
    "\002\000\024\010\050\025\044\034\040\061\056\063\033" +
    "\065\037\066\043\067\022\070\026\001\002\000\012\006" +
    "\uffdc\035\uffdc\040\uffdc\063\uffdc\001\002\000\004\053\u0129" +
    "\001\002\000\024\010\050\025\044\034\040\061\056\063" +
    "\033\065\037\066\043\067\022\070\026\001\002\000\004" +
    "\040\uffec\001\002\000\004\061\u012e\001\002\000\036\005" +
    "\036\010\050\011\045\016\027\024\013\025\044\031\051" +
    "\034\040\061\056\063\033\065\037\066\043\067\022\070" +
    "\026\001\002\000\006\040\ufffb\043\ufffb\001\002\000\006" +
    "\040\uffef\042\uffef\001\002\000\004\034\u0106\001\002\000" +
    "\004\040\u010a\001\002\000\004\040\uffc4\001\002\000\006" +
    "\035\u0133\042\147\001\002\000\004\040\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\010\071\007\001\001\000\004" +
    "\004\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\030\006\024\007\023\010\022\011\020\012\017" +
    "\013\013\014\040\015\034\016\031\020\015\021\016\022" +
    "\045\023\014\036\033\037\041\054\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\045\156\046\162\047\155\054\165\071\157\001\001\000" +
    "\002\001\001\000\004\004\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\074\026" +
    "\075\027\077\030\102\031\100\071\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\015\021\056\022" +
    "\045\023\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\062\024\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\067\001\001" +
    "\000\002\001\001\000\012\020\015\021\066\022\045\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\015\021\105\022\045\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\116\033" +
    "\114\034\115\035\117\071\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\126\001\001\000\002\001\001" +
    "\000\016\025\124\026\075\027\077\030\102\031\100\071" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\116\034\130\035\117\071\120\001" +
    "\001\000\002\001\001\000\012\027\133\030\102\031\132" +
    "\071\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\136\001\001\000\002\001\001" +
    "\000\032\007\140\010\022\011\020\012\017\015\034\016" +
    "\031\020\015\021\016\022\045\023\014\036\033\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\047\230\056\362\060\214\062\220\064\216" +
    "\065\211\066\212\001\001\000\014\045\357\046\162\047" +
    "\155\054\165\071\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\230\056\344\060\214\062\220\064" +
    "\216\065\211\066\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\230\056\336\060\214\062\220\064" +
    "\216\065\211\066\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\047\230\056\310\060" +
    "\214\062\220\064\216\065\211\066\212\001\001\000\002" +
    "\001\001\000\006\047\202\055\200\001\001\000\014\045" +
    "\174\046\162\047\155\054\165\071\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\177\047\155\054\165" +
    "\071\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\047\230\050\207\056\224\060\214\062" +
    "\220\064\216\065\211\066\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\047\230\064\276\065\211\066\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\047\230\056\266\060\214\062\220\064\216\065\211" +
    "\066\212\001\001\000\004\057\242\001\001\000\002\001" +
    "\001\000\024\047\230\056\234\060\214\062\220\064\216" +
    "\065\211\066\212\067\233\070\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\047\230" +
    "\056\265\060\214\062\220\064\216\065\211\066\212\001" +
    "\001\000\002\001\001\000\004\057\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\047\230\060\244\062\220" +
    "\064\216\065\211\066\212\001\001\000\002\001\001\000" +
    "\004\061\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\047\230\062\251\064\216\065\211\066\212\001" +
    "\001\000\002\001\001\000\004\063\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\230" +
    "\064\261\065\211\066\212\001\001\000\002\001\001\000" +
    "\022\047\230\056\234\060\214\062\220\064\216\065\211" +
    "\066\212\070\264\001\001\000\002\001\001\000\020\047" +
    "\230\056\265\060\214\062\220\064\216\065\211\066\212" +
    "\001\001\000\004\057\242\001\001\000\004\057\242\001" +
    "\001\000\002\001\001\000\022\047\230\053\271\056\272" +
    "\060\214\062\220\064\216\065\211\066\212\001\001\000" +
    "\002\001\001\000\004\057\242\001\001\000\020\047\230" +
    "\056\275\060\214\062\220\064\216\065\211\066\212\001" +
    "\001\000\002\001\001\000\004\057\242\001\001\000\002" +
    "\001\001\000\020\047\230\056\301\060\214\062\220\064" +
    "\216\065\211\066\212\001\001\000\002\001\001\000\004" +
    "\057\242\001\001\000\004\047\305\001\001\000\012\046" +
    "\304\047\155\054\165\071\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\307\047\155\054\165\071" +
    "\157\001\001\000\002\001\001\000\004\057\242\001\001" +
    "\000\010\020\116\035\312\051\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\116\035\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\320\047" +
    "\155\054\165\071\157\001\001\000\002\001\001\000\012" +
    "\046\322\047\155\054\165\071\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\047\230\053\334" +
    "\056\272\060\214\062\220\064\216\065\211\066\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\242" +
    "\001\001\000\012\046\340\047\155\054\165\071\157\001" +
    "\001\000\002\001\001\000\012\046\342\047\155\054\165" +
    "\071\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\242\001\001\000\002\001\001\000\022\047\230" +
    "\052\347\056\350\060\214\062\220\064\216\065\211\066" +
    "\212\001\001\000\002\001\001\000\004\057\242\001\001" +
    "\000\020\047\230\056\354\060\214\062\220\064\216\065" +
    "\211\066\212\001\001\000\020\047\230\056\353\060\214" +
    "\062\220\064\216\065\211\066\212\001\001\000\004\057" +
    "\242\001\001\000\004\057\242\001\001\000\012\046\356" +
    "\047\155\054\165\071\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\047\230\056\361\060\214\062\220" +
    "\064\216\065\211\066\212\001\001\000\004\057\242\001" +
    "\001\000\004\057\242\001\001\000\012\046\364\047\155" +
    "\054\165\071\157\001\001\000\002\001\001\000\016\010" +
    "\367\011\020\012\017\016\031\036\033\037\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\015\021" +
    "\371\022\045\023\014\001\001\000\002\001\001\000\006" +
    "\012\374\037\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\377\012\017\017\376\036\033\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\015\021\u0101\022\045\023\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\u0106\001" +
    "\001\000\010\042\u0112\043\u0113\044\u0111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u010a\001\001\000" +
    "\044\005\u010b\006\024\007\023\010\022\011\020\012\017" +
    "\013\013\014\040\015\034\016\031\020\015\021\016\022" +
    "\045\023\014\036\033\037\041\054\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\u0121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\u0116\044\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\015\021\u0126\022\045\023\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\015\021\u0129\022" +
    "\045\023\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\006\u012c\007\023\010\022\011\020\012\017\014" +
    "\040\015\034\016\031\020\015\021\016\022\045\023\014" +
    "\036\033\037\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u012f\001\001\000\004\040\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	/* Reporte de error encontrado. */
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	/* Cuando se encuentra un error de donde el sistema no puede
		recuperarse, se lanza un error fatal. Se despliega el mensaje
		de error y se finaliza la ejecucion. */
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token, cur_token);
	}

	/* Metodo main para garantizar la ejecucion del analizador
	   lexico y sintactico, ademas que se pase como parametro la tabla
	   de simbolos correspondiente. */
	public static void main(String[] args){
		try {
			parser asin = new parser(
					new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
			System.out.println("\n*** Resultados finales ***");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // element ::= element expression 
            {
              Element RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(el, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // element ::= expression 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // elementList ::= elementList COMMA element 
            {
              ElementList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElementList el = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e, (String) c, el);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elementList ::= element 
            {
              ElementList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primaryExpression ::= variable 
            {
              PrimaryExpression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression(var);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primaryExpression ::= STRING 
            {
              PrimaryExpression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) string);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // primaryExpression ::= INTEGER 
            {
              PrimaryExpression RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) integer);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // primaryExpression ::= NIL 
            {
              PrimaryExpression RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) nil);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // primaryExpression ::= LEFT_PAR expression RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lp, exp, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // primaryExpression ::= LEFT_BRACKET elementList RIGHT_BRACKET 
            {
              PrimaryExpression RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElementList elm = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lb, elm, (String) rb);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // primaryExpression ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) tid, (String) lp, el, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unaryOp ::= NOT 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unaryOp ::= MINUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unaryOp ::= PLUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unaryExpression ::= primaryExpression 
            {
              UnaryExpression RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpression pe = (PrimaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(pe);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryExpression ::= unaryOp unaryExpression 
            {
              UnaryExpression RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOp uo = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(uo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // multiplicativeOp ::= IN 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // multiplicativeOp ::= AND 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // multiplicativeOp ::= MOD 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // multiplicativeOp ::= DIV 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // multiplicativeOp ::= DIVIDE 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // multiplicativeOp ::= PRODUCT 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // multiplicativeExpression ::= unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // multiplicativeExpression ::= multiplicativeExpression multiplicativeOp unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MultiplicativeOp mo = (MultiplicativeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(me, mo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // additiveOp ::= OR 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // additiveOp ::= MINUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // additiveOp ::= PLUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // additiveExpression ::= multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // additiveExpression ::= additiveExpression additiveOp multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AdditiveOp ao = (AdditiveOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(ae, ao, me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relationalOp ::= GREATER_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relationalOp ::= GREATER_EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relationalOp ::= NOT_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relationalOp ::= EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relationalOp ::= LESS_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relationalOp ::= LESS_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= error 
            {
              Expression RESULT =null;
		
									System.err.println("Error, la expression no tiene operador.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= INT_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= additiveExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= expression relationalOp additiveExpression 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelationalOp ro = (RelationalOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ex, ro, ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // recordVariableList ::= recordVariableList COMMA variable 
            {
              RecordVariableList RESULT =null;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(rvl, (String) s, v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // recordVariableList ::= variable 
            {
              RecordVariableList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // label ::= INTEGER 
            {
              Label RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Label r = new Label((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expressionList ::= expressionList COMMA expression 
            {
              ExpressionList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(el, (String) s, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expressionList ::= expression 
            {
              ExpressionList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // forList ::= expression DOWNTO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // forList ::= expression TO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // caseList ::= caseList SEMICOLON caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) sc, (String) c, stm, cl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // caseList ::= caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) s, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // subscriptList ::= subscriptList COMMA expression 
            {
              SubscriptList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(sl, (String) s, e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // subscriptList ::= expression 
            {
              SubscriptList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable ::= ID ASIGN 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) a);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= ID DOT ID 
            {
              Variable RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) idl, (String) idr, (String) d);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= ID LEFT_BRACKET subscriptList RIGHT_BRACKET 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) lb, (String) rb, sl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= empty 
            {
              Statement RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= ID 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= label COLON statement 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Label lb = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(lb, (String)c, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= BEGIN statementList END 
            {
              Statement RESULT =null;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)beg, sl, (String)end);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= variable expression 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(var, exp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		int whileexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object whileexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)whileexp, exp, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= CASE expression OF caseList END 
            {
              Statement RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String) caseexp, exp, (String)of, cl, (String)endexp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= WITH recordVariableList DO statement 
            {
              Statement RESULT =null;
		int withleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int withright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object with = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)with, rvl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= FOR ID ASIGN forList DO statement 
            {
              Statement RESULT =null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object forexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForList fl = (ForList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)forexp, (String)id, (String)asign, fl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= REPEAT statementList UNTIL expression 
            {
              Statement RESULT =null;
		int rptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int untilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int untilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object until = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rpt, sl, (String)until, exp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= READ_LN LEFT_PAR ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int rdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rdl, (String)lpar, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= WRITE_LN LEFT_PAR ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= WRITE_LN LEFT_PAR STRING_LITERAL RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)sl, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= WRITE_LN LEFT_PAR STRING_LITERAL COMMA ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)sl, (String)c, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id, (String)lpar, el, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, e, (String)elseexp, f);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statementList ::= statementList SEMICOLON statement 
            {
              StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(sl, (String)sc, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statementList ::= statement 
            {
              StatementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(stm);
									RESULT = r;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameteridList ::= parameteridList COMMA ID 
            {
              ParameterIdList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pl = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList(pl, (String)c, (String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameteridList ::= ID 
            {
              ParameterIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // formalParameterSection ::= FUNCTION ID parameters COLON ID 
            {
              FormalParameterSection RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) func, (String) idl, params, (String) colon, (String) idr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // formalParameterSection ::= PROCEDURE ID parameters 
            {
              FormalParameterSection RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) proc, (String) id, params);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // formalParameterSection ::= VAR parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) var, pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // formalParameterSection ::= parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection(pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // formalParameterList ::= formalParameterList SEMICOLON formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fpl, (String) sc, fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // formalParameterList ::= formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameters ::= LEFT_PAR formalParameterList RIGHT_PAR 
            {
              Parameters RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Parameters r = new Parameters((String) lpar, fpl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // blockOrForward ::= SEMICOLON FORWARD 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, (String) fw);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // blockOrForward ::= SEMICOLON block 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, bl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procOrFunc ::= FUNCTION ID parameters COLON ID blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward bof = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) func, (String) idl, (String) idr, par, bof, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procOrFunc ::= PROCEDURE ID parameters blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward blo = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) proc, (String) id, par, blo);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procAndFuncDeclaration ::= procAndFuncDeclaration SEMICOLON procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pafdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pafdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration pafd = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pafd, (String) sc, pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // procAndFuncDeclaration ::= procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // caseLabelList ::= caseLabelList COMMA constant 
            {
              CaseLabelList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant con = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(cll, (String) comma, con);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caseLabelList ::= constant 
            {
              CaseLabelList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variant ::= caseLabelList COLON LEFT_PAR fieldList RIGHT_PAR 
            {
              Variant RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variant r = new Variant(cll, (String) colon, (String) lpar, fl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variant ::= empty 
            {
              Variant RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variantList ::= variantList SEMICOLON variant 
            {
              VariantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari, (String) sc, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variantList ::= variant 
            {
              VariantList RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tagField ::= ID COLON ID 
            {
              TagField RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) idl, (String) idr, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tagField ::= ID 
            {
              TagField RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variantPart ::= CASE tagField OF variantList 
            {
              VariantPart RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TagField tf = (TagField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantPart r = new VariantPart((String) caseexp, tf, (String) of, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantPart",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fieldidList ::= fieldidList COMMA ID 
            {
              FieldIdList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList(fl, (String) comma, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fieldidList ::= ID 
            {
              FieldIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // recordField ::= fieldidList COLON type 
            {
              RecordField RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordField r = new RecordField(fl, (String) colon, type);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // recordField ::= empty 
            {
              RecordField RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fixedPart ::= fixedPart SEMICOLON recordField 
            {
              FixedPart RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(fp, (String) sc, rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fixedPart ::= recordField 
            {
              FixedPart RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fieldList ::= variantPart 
            {
              FieldList RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fieldList ::= fixedPart SEMICOLON variantPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp, (String) sc, vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fieldList ::= fixedPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // indexList ::= indexList COMMA simpleType 
            {
              IndexList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(il, (String) comma, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // indexList ::= simpleType 
            {
              IndexList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structuredType ::= PACKED structuredType 
            {
              StructuredType RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) p, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structuredType ::= FILE OF type 
            {
              StructuredType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) f, t);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // structuredType ::= SET OF simpleType 
            {
              StructuredType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) s, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // structuredType ::= RECORD fieldList END 
            {
              StructuredType RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) e, (String) rec, fl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // structuredType ::= ARRAY LEFT_BRACKET indexList RIGHT_BRACKET OF type 
            {
              StructuredType RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) arr, (String) lbra, (String) rbra, (String) of, il, ty);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simpleType ::= ID 
            {
              SimpleType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simpleType ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              SimpleType RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) lpar, (String) rpar, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= constant 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant st = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= structuredType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constant ::= STRING 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constant ::= INTEGER 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
;									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variableidList ::= variableidList COMMA ID 
            {
              VariableIdList RESULT =null;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableIdList r = new VariableIdList((String) id, (String) c, vil);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variableidList ::= ID 
            {
              VariableIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	VariableIdList r = new VariableIdList((String) id);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variableDeclaration ::= variableDeclaration SEMICOLON variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) c, (String) sc, vil, vd,t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variableDeclaration ::= VAR variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) var, (String) c, vil, t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typeDeclaration ::= typeDeclaration SEMICOLON ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeDeclaration td = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		TypeDeclaration r = new TypeDeclaration((String) id, (String) e, (String) sc, t, td);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typeDeclaration ::= type ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tl = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tr = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	TypeDeclaration r = new TypeDeclaration((String) id, (String) e, tl, tr);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constantDeclaration ::= constantDeclaration SEMICOLON ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ConstantDeclaration cd = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) id, (String) eq, (String) sc, cons, cd);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constantDeclaration ::= CONST ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) c, (String) id, (String) eq, cons);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // labelDeclaration ::= labelDeclaration COMMA INTEGER 
            {
              LabelDeclaration RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration ld = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(ld, (String) i, (String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // labelDeclaration ::= label INTEGER 
            {
              LabelDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(l, (String) i);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block5 ::= BEGIN statementList END 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(sl, (String) b, (String) e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block5",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block4 ::= block5 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block4 ::= procAndFuncDeclaration SEMICOLON block5 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration d = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block3 ::= block4 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block3 ::= variableDeclaration SEMICOLON block4 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration d = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block2 ::= block3 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block2 ::= typeDeclaration SEMICOLON block3 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeDeclaration d = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block1 ::= block2 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block1 ::= constantDeclaration SEMICOLON block2 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstantDeclaration d = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= block1 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= labelDeclaration SEMICOLON block1 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration d = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id, (String) c, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programHeading ::= empty 
            {
              ProgramHeading RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programHeading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programHeading ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              ProgramHeading RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProgramHeading r = new ProgramHeading((String) lpar, (String) rpar, il);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programHeading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID programHeading SEMICOLON block DOT 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									  PascalProgram r = new PascalProgram((String) pro, (String) id, ph, (String) sc, b, (String) dt);
									  RESULT = r;
									  parser.root = RESULT;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

