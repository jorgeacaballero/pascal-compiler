
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 06 11:23:54 CST 2017
//----------------------------------------------------

package pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import pascal.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 06 11:23:54 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\010\000\002\002" +
    "\011\000\002\002\011\000\002\002\010\000\002\003\005" +
    "\000\002\003\003\000\002\004\003\000\002\004\005\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\013\004\000\002\013\005\000" +
    "\002\014\006\000\002\014\007\000\002\015\006\000\002" +
    "\015\007\000\002\016\006\000\002\016\007\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\010\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\005\000\002\025\003\000" +
    "\002\026\003\000\002\026\005\000\002\027\003\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\031" +
    "\006\000\002\032\003\000\002\032\005\000\002\033\003" +
    "\000\002\033\005\000\002\034\003\000\002\034\007\000" +
    "\002\035\003\000\002\035\005\000\002\036\003\000\002" +
    "\036\005\000\002\037\006\000\002\037\010\000\002\040" +
    "\004\000\002\040\004\000\002\041\005\000\002\042\003" +
    "\000\002\042\005\000\002\043\005\000\002\043\006\000" +
    "\002\043\005\000\002\043\007\000\002\044\003\000\002" +
    "\044\005\000\002\045\003\000\002\045\005\000\002\046" +
    "\010\000\002\046\006\000\002\046\010\000\002\046\006" +
    "\000\002\046\006\000\002\046\006\000\002\046\006\000" +
    "\002\046\010\000\002\046\006\000\002\046\007\000\002" +
    "\046\006\000\002\046\006\000\002\046\004\000\002\046" +
    "\005\000\002\046\005\000\002\046\003\000\002\046\003" +
    "\000\002\047\006\000\002\047\005\000\002\047\004\000" +
    "\002\047\003\000\002\050\003\000\002\050\005\000\002" +
    "\051\005\000\002\051\007\000\002\052\005\000\002\052" +
    "\005\000\002\053\003\000\002\053\005\000\002\054\003" +
    "\000\002\055\003\000\002\055\005\000\002\056\005\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\005" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\062\005\000\002\062\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\064\004" +
    "\000\002\064\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\066\006\000\002\066\005\000\002" +
    "\066\005\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\067\003\000\002\067\005" +
    "\000\002\070\003\000\002\070\004\000\002\071\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\004\004\005\001\002\000\004\002\u013b\001" +
    "\002\000\004\063\006\001\002\000\042\003\uff6a\005\uff6a" +
    "\010\uff6a\011\uff6a\016\uff6a\024\uff6a\025\uff6a\031\uff6a\034" +
    "\007\040\uff6a\061\uff6a\063\uff6a\065\uff6a\066\uff6a\067\uff6a" +
    "\070\uff6a\001\002\000\004\063\146\001\002\000\042\003" +
    "\ufffb\005\ufffb\010\ufffb\011\ufffb\016\ufffb\024\ufffb\025\ufffb" +
    "\031\ufffb\034\ufffb\040\ufffb\061\ufffb\063\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\001\002\000\042\003\046\005\036" +
    "\010\051\011\045\016\027\024\012\025\044\031\052\034" +
    "\037\040\015\061\050\063\033\065\040\066\043\067\022" +
    "\070\026\001\002\000\004\063\u0136\001\002\000\006\040" +
    "\u0133\042\u0132\001\002\000\012\006\uffdf\035\uffdf\040\uffdf" +
    "\063\uffdf\001\002\000\040\003\046\005\036\010\051\011" +
    "\045\016\027\024\012\025\044\031\052\034\037\061\050" +
    "\063\033\065\040\066\043\067\022\070\026\001\002\000" +
    "\012\006\uffde\035\uffde\040\uffde\063\uffde\001\002\000\010" +
    "\006\uffef\040\uffef\043\uffef\001\002\000\004\063\u012a\001" +
    "\002\000\010\006\ufff1\040\ufff1\043\ufff1\001\002\000\004" +
    "\022\u0128\001\002\000\010\006\ufff3\040\ufff3\043\ufff3\001" +
    "\002\000\010\006\ufff5\040\ufff5\043\ufff5\001\002\000\010" +
    "\006\ufff7\040\ufff7\043\ufff7\001\002\000\014\010\051\025" +
    "\044\066\043\067\022\070\026\001\002\000\004\063\u0107" +
    "\001\002\000\004\061\u0106\001\002\000\004\006\u0104\001" +
    "\002\000\004\040\377\001\002\000\016\006\uffdc\035\uffdc" +
    "\037\uffdc\040\uffdc\042\uffdc\063\uffdc\001\002\000\004\040" +
    "\374\001\002\000\004\040\367\001\002\000\034\005\171" +
    "\006\uff6a\015\156\017\162\032\154\040\uff6a\061\155\062" +
    "\170\063\163\071\167\073\153\100\165\101\172\001\002" +
    "\000\004\063\146\001\002\000\016\006\uffe2\035\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\063\uffe2\001\002\000\004\040\141" +
    "\001\002\000\004\040\uffc2\001\002\000\004\022\137\001" +
    "\002\000\012\006\uff6a\040\uff6a\063\075\071\103\001\002" +
    "\000\004\063\072\001\002\000\012\006\uffe1\035\uffe1\040" +
    "\uffe1\063\uffe1\001\002\000\012\006\uffe0\035\uffe0\040\uffe0" +
    "\063\uffe0\001\002\000\006\061\uff94\063\uffe3\001\002\000" +
    "\004\036\062\001\002\000\004\063\053\001\002\000\006" +
    "\041\uffe5\042\uffe5\001\002\000\006\041\056\042\055\001" +
    "\002\000\004\063\061\001\002\000\026\003\046\010\051" +
    "\025\044\034\037\061\057\063\033\065\040\066\043\067" +
    "\022\070\026\001\002\000\016\006\uffe3\035\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\063\uffe3\001\002\000\004\040\uffe7\001" +
    "\002\000\006\041\uffe4\042\uffe4\001\002\000\006\034\037" +
    "\063\033\001\002\000\006\037\066\042\065\001\002\000" +
    "\006\037\uffd6\042\uffd6\001\002\000\006\034\037\063\033" +
    "\001\002\000\004\022\067\001\002\000\026\003\046\010" +
    "\051\025\044\034\037\061\057\063\033\065\040\066\043" +
    "\067\022\070\026\001\002\000\012\006\uffdb\035\uffdb\040" +
    "\uffdb\063\uffdb\001\002\000\006\037\uffd5\042\uffd5\001\002" +
    "\000\004\053\073\001\002\000\006\061\057\065\040\001" +
    "\002\000\004\040\uffeb\001\002\000\006\041\uffcd\042\uffcd" +
    "\001\002\000\004\006\136\001\002\000\010\006\uffd4\035" +
    "\uffd4\040\133\001\002\000\006\006\uffd2\035\uffd2\001\002" +
    "\000\010\006\uffcf\035\uffcf\040\uffcf\001\002\000\010\006" +
    "\uffd1\035\uffd1\040\uffd1\001\002\000\004\063\111\001\002" +
    "\000\006\041\106\042\105\001\002\000\004\063\110\001" +
    "\002\000\026\003\046\010\051\025\044\034\037\061\057" +
    "\063\033\065\040\066\043\067\022\070\026\001\002\000" +
    "\010\006\uffce\035\uffce\040\uffce\001\002\000\006\041\uffcc" +
    "\042\uffcc\001\002\000\006\022\uffca\041\131\001\002\000" +
    "\004\022\113\001\002\000\014\006\uff6a\035\uff6a\040\uff6a" +
    "\061\057\065\040\001\002\000\010\006\uffcb\035\uffcb\040" +
    "\127\001\002\000\010\006\uffc8\035\uffc8\040\uffc8\001\002" +
    "\000\006\041\uffc4\042\uffc4\001\002\000\006\041\122\042" +
    "\121\001\002\000\010\006\uffc6\035\uffc6\040\uffc6\001\002" +
    "\000\006\061\057\065\040\001\002\000\004\034\123\001" +
    "\002\000\012\035\uff6a\040\uff6a\063\075\071\103\001\002" +
    "\000\004\035\125\001\002\000\010\006\uffc5\035\uffc5\040" +
    "\uffc5\001\002\000\006\041\uffc3\042\uffc3\001\002\000\014" +
    "\006\uff6a\035\uff6a\040\uff6a\061\057\065\040\001\002\000" +
    "\010\006\uffc7\035\uffc7\040\uffc7\001\002\000\004\063\132" +
    "\001\002\000\004\022\uffc9\001\002\000\014\006\uff6a\035" +
    "\uff6a\040\uff6a\063\075\071\103\001\002\000\010\006\uffd0" +
    "\035\uffd0\040\uffd0\001\002\000\006\006\uffd3\035\uffd3\001" +
    "\002\000\012\006\uffda\035\uffda\040\uffda\063\uffda\001\002" +
    "\000\006\034\037\063\033\001\002\000\012\006\uffd9\035" +
    "\uffd9\040\uffd9\063\uffd9\001\002\000\036\003\046\005\036" +
    "\010\051\016\027\024\012\025\044\031\052\034\037\061" +
    "\057\063\143\065\040\066\043\067\022\070\026\001\002" +
    "\000\010\006\ufff6\040\ufff6\043\ufff6\001\002\000\006\053" +
    "\144\063\uffdc\001\002\000\006\061\057\065\040\001\002" +
    "\000\004\040\uffea\001\002\000\006\035\ufffa\042\ufffa\001" +
    "\002\000\006\035\151\042\150\001\002\000\004\063\152" +
    "\001\002\000\016\006\uffdd\035\uffdd\037\uffdd\040\uffdd\042" +
    "\uffdd\063\uffdd\001\002\000\006\035\ufff9\042\ufff9\001\002" +
    "\000\034\005\171\015\156\017\162\032\154\040\uff6a\061" +
    "\155\062\170\063\163\071\167\073\153\074\uff6a\100\165" +
    "\101\172\001\002\000\030\003\231\020\217\021\215\034" +
    "\225\036\230\045\212\046\227\061\233\063\220\065\224" +
    "\103\223\001\002\000\004\041\uff94\001\002\000\004\063" +
    "\347\001\002\000\030\003\231\020\217\021\215\034\225" +
    "\036\230\045\212\046\227\061\233\063\220\065\224\103" +
    "\223\001\002\000\006\006\345\040\177\001\002\000\012" +
    "\006\uffa1\014\uffa1\040\uffa1\074\uffa1\001\002\000\030\003" +
    "\231\020\217\021\215\034\225\036\230\045\212\046\227" +
    "\061\233\063\220\065\224\103\223\001\002\000\044\003" +
    "\uff9d\006\uffa2\014\uffa2\020\uff9d\021\uff9d\034\335\036\206" +
    "\040\uffa2\043\207\044\205\045\uff9d\046\uff9d\061\uff9d\063" +
    "\uff9d\065\uff9d\074\uffa2\103\uff9d\001\002\000\010\006\uffb3" +
    "\040\uffb3\074\uffb3\001\002\000\004\034\325\001\002\000" +
    "\004\041\323\001\002\000\030\003\231\020\217\021\215" +
    "\034\225\036\230\045\212\046\227\061\233\063\220\065" +
    "\224\103\223\001\002\000\004\063\203\001\002\000\034" +
    "\005\171\006\uff6a\015\156\017\162\032\154\040\uff6a\061" +
    "\155\062\170\063\163\071\167\073\153\100\165\101\172" +
    "\001\002\000\004\034\173\001\002\000\004\063\174\001" +
    "\002\000\004\035\175\001\002\000\012\006\uffac\014\uffac" +
    "\040\uffac\074\uffac\001\002\000\006\006\200\040\177\001" +
    "\002\000\036\005\171\006\uff6a\015\156\017\162\032\154" +
    "\040\uff6a\061\155\062\170\063\163\071\167\073\153\074" +
    "\uff6a\100\165\101\172\001\002\000\012\006\uffa4\014\uffa4" +
    "\040\uffa4\074\uffa4\001\002\000\010\006\uffb2\040\uffb2\074" +
    "\uffb2\001\002\000\006\013\305\042\304\001\002\000\014" +
    "\013\uff9d\036\206\042\uff9d\043\207\044\205\001\002\000" +
    "\006\013\uff93\042\uff93\001\002\000\112\003\uff9e\006\uff9e" +
    "\007\uff9e\012\uff9e\013\uff9e\014\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\026\uff9e\027\uff9e\030\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\042\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\063\uff9e\064\uff9e\065\uff9e\074" +
    "\uff9e\103\uff9e\001\002\000\030\003\231\020\217\021\215" +
    "\034\225\036\230\045\212\046\227\061\233\063\220\065" +
    "\224\103\223\001\002\000\004\063\210\001\002\000\112" +
    "\003\uff9f\006\uff9f\007\uff9f\012\uff9f\013\uff9f\014\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\042\uff9f\045" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\074\uff9f\103\uff9f\001\002\000\006\037\302" +
    "\042\301\001\002\000\024\020\uff78\021\uff78\034\uff78\036" +
    "\uff78\045\uff78\046\uff78\061\uff78\063\uff78\065\uff78\001\002" +
    "\000\112\003\uff79\006\uff79\007\uff79\012\uff79\013\uff79\014" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\026\uff79\027\uff79" +
    "\030\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\042" +
    "\uff79\045\uff79\046\uff79\047\uff79\050\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\063" +
    "\uff79\064\uff79\065\uff79\074\uff79\103\uff79\001\002\000\024" +
    "\020\217\021\215\034\225\036\230\045\212\046\227\061" +
    "\233\063\220\065\224\001\002\000\024\020\uff76\021\uff76" +
    "\034\uff76\036\uff76\045\uff76\046\uff76\061\uff76\063\uff76\065" +
    "\uff76\001\002\000\076\003\uff90\006\uff90\013\uff90\014\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\252\026\uff90\027\uff90\030" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\042\uff90" +
    "\045\247\046\250\053\uff90\054\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\063\uff90\065\uff90\074\uff90\103\uff90" +
    "\001\002\000\112\003\uff72\006\uff72\007\uff72\012\uff72\013" +
    "\uff72\014\uff72\020\uff72\021\uff72\022\uff72\023\uff72\026\uff72" +
    "\027\uff72\030\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\042\uff72\045\uff72\046\uff72\047\uff72\050\uff72\052\uff72" +
    "\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061" +
    "\uff72\063\uff72\064\uff72\065\uff72\074\uff72\103\uff72\001\002" +
    "\000\116\003\uff9d\006\uff9d\007\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\034\272\035\uff9d\036\206\037\uff9d\040\uff9d\042" +
    "\uff9d\043\207\044\205\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\074\uff9d\103\uff9d" +
    "\001\002\000\112\003\uff81\006\uff81\007\uff81\012\uff81\013" +
    "\uff81\014\uff81\020\uff81\021\uff81\022\uff81\023\uff81\026\uff81" +
    "\027\uff81\030\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\042\uff81\045\uff81\046\uff81\047\uff81\050\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060\uff81\061" +
    "\uff81\063\uff81\064\uff81\065\uff81\074\uff81\103\uff81\001\002" +
    "\000\112\003\uff86\006\uff86\007\256\012\261\013\uff86\014" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\026\uff86\027\uff86" +
    "\030\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\042" +
    "\uff86\045\uff86\046\uff86\047\260\050\257\052\254\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\063" +
    "\uff86\064\255\065\uff86\074\uff86\103\uff86\001\002\000\074" +
    "\003\uff8f\006\uff8f\013\uff8f\014\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\040\uff8f\042\uff8f\045\uff8f\046\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f" +
    "\065\uff8f\074\uff8f\103\uff8f\001\002\000\112\003\uff70\006" +
    "\uff70\007\uff70\012\uff70\013\uff70\014\uff70\020\uff70\021\uff70" +
    "\022\uff70\023\uff70\026\uff70\027\uff70\030\uff70\034\uff70\035" +
    "\uff70\036\uff70\037\uff70\040\uff70\042\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056" +
    "\uff70\057\uff70\060\uff70\061\uff70\063\uff70\064\uff70\065\uff70" +
    "\074\uff70\103\uff70\001\002\000\030\003\231\020\217\021" +
    "\215\034\225\036\230\045\212\046\227\061\233\063\220" +
    "\065\224\103\223\001\002\000\022\037\uff9c\042\uff9c\053" +
    "\241\054\237\055\242\056\240\057\243\060\245\001\002" +
    "\000\024\020\uff77\021\uff77\034\uff77\036\uff77\045\uff77\046" +
    "\uff77\061\uff77\063\uff77\065\uff77\001\002\000\030\003\231" +
    "\020\217\021\215\034\225\036\230\045\212\046\227\061" +
    "\233\063\220\065\224\103\223\001\002\000\074\003\uff8e" +
    "\006\uff8e\013\uff8e\014\uff8e\020\uff8e\021\uff8e\022\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\042\uff8e\045\uff8e\046\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\063\uff8e\065\uff8e" +
    "\074\uff8e\103\uff8e\001\002\000\112\003\uff6f\006\uff6f\007" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\020\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\026\uff6f\027\uff6f\030\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\042\uff6f\045\uff6f\046\uff6f\047\uff6f" +
    "\050\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\060\uff6f\061\uff6f\063\uff6f\064\uff6f\065\uff6f\074\uff6f" +
    "\103\uff6f\001\002\000\112\003\uff71\006\uff71\007\uff71\012" +
    "\uff71\013\uff71\014\uff71\020\uff71\021\uff71\022\uff71\023\uff71" +
    "\026\uff71\027\uff71\030\uff71\034\uff71\035\uff71\036\uff71\037" +
    "\uff71\040\uff71\042\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\052\uff71\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060" +
    "\uff71\061\uff71\063\uff71\064\uff71\065\uff71\074\uff71\103\uff71" +
    "\001\002\000\034\003\231\020\217\021\215\034\225\036" +
    "\230\037\uff6e\042\uff6e\045\212\046\227\061\233\063\220" +
    "\065\224\103\223\001\002\000\006\037\265\042\264\001" +
    "\002\000\050\003\uff6c\020\uff6c\021\uff6c\034\uff6c\036\uff6c" +
    "\037\uff6c\042\uff6c\045\uff6c\046\uff6c\053\241\054\237\055" +
    "\242\056\240\057\243\060\245\061\uff6c\063\uff6c\065\uff6c" +
    "\103\uff6c\001\002\000\024\020\uff8a\021\uff8a\034\uff8a\036" +
    "\uff8a\045\uff8a\046\uff8a\061\uff8a\063\uff8a\065\uff8a\001\002" +
    "\000\024\020\uff8d\021\uff8d\034\uff8d\036\uff8d\045\uff8d\046" +
    "\uff8d\061\uff8d\063\uff8d\065\uff8d\001\002\000\024\020\uff8b" +
    "\021\uff8b\034\uff8b\036\uff8b\045\uff8b\046\uff8b\061\uff8b\063" +
    "\uff8b\065\uff8b\001\002\000\024\020\uff88\021\uff88\034\uff88" +
    "\036\uff88\045\uff88\046\uff88\061\uff88\063\uff88\065\uff88\001" +
    "\002\000\024\020\uff89\021\uff89\034\uff89\036\uff89\045\uff89" +
    "\046\uff89\061\uff89\063\uff89\065\uff89\001\002\000\024\020" +
    "\217\021\215\034\225\036\230\045\212\046\227\061\233" +
    "\063\220\065\224\001\002\000\024\020\uff8c\021\uff8c\034" +
    "\uff8c\036\uff8c\045\uff8c\046\uff8c\061\uff8c\063\uff8c\065\uff8c" +
    "\001\002\000\076\003\uff91\006\uff91\013\uff91\014\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\252\026\uff91\027\uff91\030\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\042\uff91\045" +
    "\247\046\250\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91" +
    "\060\uff91\061\uff91\063\uff91\065\uff91\074\uff91\103\uff91\001" +
    "\002\000\024\020\uff85\021\uff85\034\uff85\036\uff85\045\uff85" +
    "\046\uff85\061\uff85\063\uff85\065\uff85\001\002\000\024\020" +
    "\uff84\021\uff84\034\uff84\036\uff84\045\uff84\046\uff84\061\uff84" +
    "\063\uff84\065\uff84\001\002\000\024\020\217\021\215\034" +
    "\225\036\230\045\212\046\227\061\233\063\220\065\224" +
    "\001\002\000\024\020\uff83\021\uff83\034\uff83\036\uff83\045" +
    "\uff83\046\uff83\061\uff83\063\uff83\065\uff83\001\002\000\112" +
    "\003\uff87\006\uff87\007\256\012\261\013\uff87\014\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\026\uff87\027\uff87\030\uff87" +
    "\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\042\uff87\045" +
    "\uff87\046\uff87\047\260\050\257\052\254\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\063\uff87\064" +
    "\255\065\uff87\074\uff87\103\uff87\001\002\000\024\020\uff7d" +
    "\021\uff7d\034\uff7d\036\uff7d\045\uff7d\046\uff7d\061\uff7d\063" +
    "\uff7d\065\uff7d\001\002\000\024\020\uff7b\021\uff7b\034\uff7b" +
    "\036\uff7b\045\uff7b\046\uff7b\061\uff7b\063\uff7b\065\uff7b\001" +
    "\002\000\024\020\uff7c\021\uff7c\034\uff7c\036\uff7c\045\uff7c" +
    "\046\uff7c\061\uff7c\063\uff7c\065\uff7c\001\002\000\024\020" +
    "\uff80\021\uff80\034\uff80\036\uff80\045\uff80\046\uff80\061\uff80" +
    "\063\uff80\065\uff80\001\002\000\024\020\uff7f\021\uff7f\034" +
    "\uff7f\036\uff7f\045\uff7f\046\uff7f\061\uff7f\063\uff7f\065\uff7f" +
    "\001\002\000\024\020\uff7e\021\uff7e\034\uff7e\036\uff7e\045" +
    "\uff7e\046\uff7e\061\uff7e\063\uff7e\065\uff7e\001\002\000\024" +
    "\020\217\021\215\034\225\036\230\045\212\046\227\061" +
    "\233\063\220\065\224\001\002\000\112\003\uff82\006\uff82" +
    "\007\uff82\012\uff82\013\uff82\014\uff82\020\uff82\021\uff82\022" +
    "\uff82\023\uff82\026\uff82\027\uff82\030\uff82\034\uff82\035\uff82" +
    "\036\uff82\037\uff82\040\uff82\042\uff82\045\uff82\046\uff82\047" +
    "\uff82\050\uff82\052\uff82\053\uff82\054\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\061\uff82\063\uff82\064\uff82\065\uff82\074" +
    "\uff82\103\uff82\001\002\000\030\003\231\020\217\021\215" +
    "\034\225\036\230\045\212\046\227\061\233\063\220\065" +
    "\224\103\223\001\002\000\112\003\uff74\006\uff74\007\uff74" +
    "\012\uff74\013\uff74\014\uff74\020\uff74\021\uff74\022\uff74\023" +
    "\uff74\026\uff74\027\uff74\030\uff74\034\uff74\035\uff74\036\uff74" +
    "\037\uff74\040\uff74\042\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\052\uff74\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74" +
    "\060\uff74\061\uff74\063\uff74\064\uff74\065\uff74\074\uff74\103" +
    "\uff74\001\002\000\034\003\231\020\217\021\215\034\225" +
    "\036\230\037\uff6d\042\uff6d\045\212\046\227\061\233\063" +
    "\220\065\224\103\223\001\002\000\050\003\uff6b\020\uff6b" +
    "\021\uff6b\034\uff6b\036\uff6b\037\uff6b\042\uff6b\045\uff6b\046" +
    "\uff6b\053\241\054\237\055\242\056\240\057\243\060\245" +
    "\061\uff6b\063\uff6b\065\uff6b\103\uff6b\001\002\000\020\035" +
    "\271\053\241\054\237\055\242\056\240\057\243\060\245" +
    "\001\002\000\112\003\uff73\006\uff73\007\uff73\012\uff73\013" +
    "\uff73\014\uff73\020\uff73\021\uff73\022\uff73\023\uff73\026\uff73" +
    "\027\uff73\030\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040" +
    "\uff73\042\uff73\045\uff73\046\uff73\047\uff73\050\uff73\052\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061" +
    "\uff73\063\uff73\064\uff73\065\uff73\074\uff73\103\uff73\001\002" +
    "\000\030\003\231\020\217\021\215\034\225\036\230\045" +
    "\212\046\227\061\233\063\220\065\224\103\223\001\002" +
    "\000\006\035\276\042\275\001\002\000\022\035\uff96\042" +
    "\uff96\053\241\054\237\055\242\056\240\057\243\060\245" +
    "\001\002\000\030\003\231\020\217\021\215\034\225\036" +
    "\230\045\212\046\227\061\233\063\220\065\224\103\223" +
    "\001\002\000\112\003\uff75\006\uff75\007\uff75\012\uff75\013" +
    "\uff75\014\uff75\020\uff75\021\uff75\022\uff75\023\uff75\026\uff75" +
    "\027\uff75\030\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\042\uff75\045\uff75\046\uff75\047\uff75\050\uff75\052\uff75" +
    "\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061" +
    "\uff75\063\uff75\064\uff75\065\uff75\074\uff75\103\uff75\001\002" +
    "\000\022\035\uff95\042\uff95\053\241\054\237\055\242\056" +
    "\240\057\243\060\245\001\002\000\112\003\uff7a\006\uff7a" +
    "\007\uff7a\012\uff7a\013\uff7a\014\uff7a\020\uff7a\021\uff7a\022" +
    "\uff7a\023\uff7a\026\uff7a\027\uff7a\030\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\037\uff7a\040\uff7a\042\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\063\uff7a\064\uff7a\065\uff7a\074" +
    "\uff7a\103\uff7a\001\002\000\030\003\231\020\217\021\215" +
    "\034\225\036\230\045\212\046\227\061\233\063\220\065" +
    "\224\103\223\001\002\000\112\003\uffa0\006\uffa0\007\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\042\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\063\uffa0\064\uffa0\065\uffa0\074\uffa0\103" +
    "\uffa0\001\002\000\022\037\uff9b\042\uff9b\053\241\054\237" +
    "\055\242\056\240\057\243\060\245\001\002\000\004\063" +
    "\203\001\002\000\040\005\171\006\uff6a\014\uff6a\015\156" +
    "\017\162\032\154\040\uff6a\061\155\062\170\063\163\071" +
    "\167\073\153\074\uff6a\100\165\101\172\001\002\000\012" +
    "\006\uffa9\014\uffa9\040\uffa9\074\uffa9\001\002\000\006\013" +
    "\uff92\042\uff92\001\002\000\020\022\311\053\241\054\237" +
    "\055\242\056\240\057\243\060\245\001\002\000\006\061" +
    "\057\065\040\001\002\000\006\041\321\042\121\001\002" +
    "\000\006\006\315\040\314\001\002\000\006\061\057\065" +
    "\040\001\002\000\012\006\uffa8\014\uffa8\040\uffa8\074\uffa8" +
    "\001\002\000\006\041\317\042\121\001\002\000\034\005" +
    "\171\006\uff6a\015\156\017\162\032\154\040\uff6a\061\155" +
    "\062\170\063\163\071\167\073\153\100\165\101\172\001" +
    "\002\000\006\006\uff99\040\uff99\001\002\000\034\005\171" +
    "\006\uff6a\015\156\017\162\032\154\040\uff6a\061\155\062" +
    "\170\063\163\071\167\073\153\100\165\101\172\001\002" +
    "\000\006\006\uff9a\040\uff9a\001\002\000\040\005\171\006" +
    "\uff6a\014\uff6a\015\156\017\162\032\154\040\uff6a\061\155" +
    "\062\170\063\163\071\167\073\153\074\uff6a\100\165\101" +
    "\172\001\002\000\012\006\uffa3\014\uffa3\040\uffa3\074\uffa3" +
    "\001\002\000\006\063\326\110\327\001\002\000\004\035" +
    "\334\001\002\000\006\035\331\042\330\001\002\000\004" +
    "\063\332\001\002\000\012\006\uffae\014\uffae\040\uffae\074" +
    "\uffae\001\002\000\004\035\333\001\002\000\012\006\uffaf" +
    "\014\uffaf\040\uffaf\074\uffaf\001\002\000\012\006\uffad\014" +
    "\uffad\040\uffad\074\uffad\001\002\000\030\003\231\020\217" +
    "\021\215\034\225\036\230\045\212\046\227\061\233\063" +
    "\220\065\224\103\223\001\002\000\006\035\337\042\275" +
    "\001\002\000\012\006\uffb0\014\uffb0\040\uffb0\074\uffb0\001" +
    "\002\000\020\026\341\053\241\054\237\055\242\056\240" +
    "\057\243\060\245\001\002\000\040\005\171\006\uff6a\014" +
    "\uff6a\015\156\017\162\032\154\040\uff6a\061\155\062\170" +
    "\063\163\071\167\073\153\074\uff6a\100\165\101\172\001" +
    "\002\000\012\006\uffa6\014\343\040\uffa6\074\uffa6\001\002" +
    "\000\040\005\171\006\uff6a\014\uff6a\015\156\017\162\032" +
    "\154\040\uff6a\061\155\062\170\063\163\071\167\073\153" +
    "\074\uff6a\100\165\101\172\001\002\000\012\006\uffb1\014" +
    "\uffb1\040\uffb1\074\uffb1\001\002\000\010\006\uffee\040\uffee" +
    "\043\uffee\001\002\000\026\006\uffa5\014\uffa5\040\uffa5\053" +
    "\241\054\237\055\242\056\240\057\243\060\245\074\uffa5" +
    "\001\002\000\004\044\350\001\002\000\030\003\231\020" +
    "\217\021\215\034\225\036\230\045\212\046\227\061\233" +
    "\063\220\065\224\103\223\001\002\000\004\013\357\001" +
    "\002\000\022\027\353\030\354\053\241\054\237\055\242" +
    "\056\240\057\243\060\245\001\002\000\030\003\231\020" +
    "\217\021\215\034\225\036\230\045\212\046\227\061\233" +
    "\063\220\065\224\103\223\001\002\000\030\003\231\020" +
    "\217\021\215\034\225\036\230\045\212\046\227\061\233" +
    "\063\220\065\224\103\223\001\002\000\020\013\uff97\053" +
    "\241\054\237\055\242\056\240\057\243\060\245\001\002" +
    "\000\020\013\uff98\053\241\054\237\055\242\056\240\057" +
    "\243\060\245\001\002\000\040\005\171\006\uff6a\014\uff6a" +
    "\015\156\017\162\032\154\040\uff6a\061\155\062\170\063" +
    "\163\071\167\073\153\074\uff6a\100\165\101\172\001\002" +
    "\000\012\006\uffaa\014\uffaa\040\uffaa\074\uffaa\001\002\000" +
    "\020\013\362\053\241\054\237\055\242\056\240\057\243" +
    "\060\245\001\002\000\040\005\171\006\uff6a\014\uff6a\015" +
    "\156\017\162\032\154\040\uff6a\061\155\062\170\063\163" +
    "\071\167\073\153\074\uff6a\100\165\101\172\001\002\000" +
    "\012\006\uffa7\014\uffa7\040\uffa7\074\uffa7\001\002\000\006" +
    "\040\177\074\365\001\002\000\030\003\231\020\217\021" +
    "\215\034\225\036\230\045\212\046\227\061\233\063\220" +
    "\065\224\103\223\001\002\000\026\006\uffab\014\uffab\040" +
    "\uffab\053\241\054\237\055\242\056\240\057\243\060\245" +
    "\074\uffab\001\002\000\014\005\036\016\027\024\012\031" +
    "\052\063\370\001\002\000\004\053\372\001\002\000\010" +
    "\006\ufff4\040\ufff4\043\ufff4\001\002\000\026\003\046\010" +
    "\051\025\044\034\037\061\057\063\033\065\040\066\043" +
    "\067\022\070\026\001\002\000\004\040\uffe8\001\002\000" +
    "\010\005\036\016\027\024\012\001\002\000\004\040\uffc1" +
    "\001\002\000\010\006\ufff0\040\ufff0\043\ufff0\001\002\000" +
    "\012\005\036\016\027\024\012\063\053\001\002\000\006" +
    "\041\u0102\042\055\001\002\000\010\006\ufff2\040\ufff2\043" +
    "\ufff2\001\002\000\026\003\046\010\051\025\044\034\037" +
    "\061\057\063\033\065\040\066\043\067\022\070\026\001" +
    "\002\000\004\040\uffe6\001\002\000\004\043\u0105\001\002" +
    "\000\004\002\000\001\002\000\006\040\uffed\042\uffed\001" +
    "\002\000\004\034\u0108\001\002\000\012\016\u0113\024\u0112" +
    "\031\u0110\063\u0111\001\002\000\004\041\u010a\001\002\000" +
    "\004\063\u010b\001\002\000\004\040\u010c\001\002\000\042" +
    "\003\046\005\036\010\051\011\045\016\027\024\012\025" +
    "\044\031\052\034\037\061\050\063\033\065\040\066\043" +
    "\067\022\070\026\072\u010f\001\002\000\004\040\uffbf\001" +
    "\002\000\004\040\uffbe\001\002\000\004\040\uffbd\001\002" +
    "\000\004\063\u0111\001\002\000\006\041\uffb5\042\uffb5\001" +
    "\002\000\004\063\u0122\001\002\000\004\063\u011e\001\002" +
    "\000\006\035\uffbb\040\uffbb\001\002\000\006\035\u011c\040" +
    "\u011b\001\002\000\006\041\u0118\042\u0117\001\002\000\004" +
    "\063\u011a\001\002\000\004\063\u0119\001\002\000\006\035" +
    "\uffb9\040\uffb9\001\002\000\006\041\uffb4\042\uffb4\001\002" +
    "\000\012\016\u0113\024\u0112\031\u0110\063\u0111\001\002\000" +
    "\010\035\uffbc\040\uffbc\041\uffbc\001\002\000\006\035\uffba" +
    "\040\uffba\001\002\000\004\034\u0108\001\002\000\004\041" +
    "\u0120\001\002\000\004\063\u0121\001\002\000\006\035\uffb6" +
    "\040\uffb6\001\002\000\004\034\u0108\001\002\000\006\035" +
    "\uffb7\040\uffb7\001\002\000\006\041\u0125\042\u0117\001\002" +
    "\000\004\063\u0126\001\002\000\006\035\uffb8\040\uffb8\001" +
    "\002\000\012\006\uffd7\035\uffd7\040\uffd7\063\uffd7\001\002" +
    "\000\026\003\046\010\051\025\044\034\037\061\057\063" +
    "\033\065\040\066\043\067\022\070\026\001\002\000\012" +
    "\006\uffd8\035\uffd8\040\uffd8\063\uffd8\001\002\000\004\053" +
    "\u012b\001\002\000\026\003\046\010\051\025\044\034\037" +
    "\061\057\063\033\065\040\066\043\067\022\070\026\001" +
    "\002\000\004\040\uffe9\001\002\000\006\006\u012e\043\u012f" +
    "\001\002\000\006\003\u0130\043\u0131\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffe\001\002\000\004\002\uffff" +
    "\001\002\000\004\061\u0135\001\002\000\040\003\046\005" +
    "\036\010\051\011\045\016\027\024\012\025\044\031\052" +
    "\034\037\061\057\063\033\065\040\066\043\067\022\070" +
    "\026\001\002\000\010\006\ufff8\040\ufff8\043\ufff8\001\002" +
    "\000\006\040\uffec\042\uffec\001\002\000\004\034\u0108\001" +
    "\002\000\004\040\u010c\001\002\000\004\040\uffc0\001\002" +
    "\000\006\035\u013a\042\150\001\002\000\042\003\ufffc\005" +
    "\ufffc\010\ufffc\011\ufffc\016\ufffc\024\ufffc\025\ufffc\031\ufffc" +
    "\034\ufffc\040\ufffc\061\ufffc\063\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0139\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\010\071\007\001\001\000\004" +
    "\004\u0138\001\001\000\002\001\001\000\044\005\030\006" +
    "\024\007\023\010\022\011\020\012\016\013\012\014\040" +
    "\015\034\016\031\020\015\021\017\022\046\023\013\036" +
    "\033\037\041\054\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\u012c\006\024\007" +
    "\023\010\022\011\020\012\016\013\012\014\040\015\034" +
    "\016\031\020\015\021\017\022\046\023\013\036\033\037" +
    "\041\054\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\045\157\046\163\047" +
    "\156\054\165\071\160\001\001\000\004\004\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\075\026\076\027\101\030\103" +
    "\031\077\071\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\015\021\057\022\046" +
    "\023\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\063\024\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\070\001\001\000" +
    "\002\001\001\000\012\020\015\021\067\022\046\023\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\015\021\106\022\046\023\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\115\033\113\034\114\035\116\071\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\125\001\001" +
    "\000\002\001\001\000\016\025\123\026\076\027\101\030" +
    "\103\031\077\071\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\115\034\127\035" +
    "\116\071\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\027\133\030\103\031\134\071" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\137\001\001\000\002\001\001\000" +
    "\032\007\141\010\022\011\020\012\016\015\034\016\031" +
    "\020\015\021\017\022\046\023\013\036\033\037\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\045\363\046\163\047\156\054\165\071\160\001" +
    "\001\000\020\047\231\056\360\060\215\062\221\064\220" +
    "\065\213\066\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\047\231\056\345\060\215\062\221\064\220" +
    "\065\213\066\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\047\231\056\337\060\215\062\221\064\220" +
    "\065\213\066\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\047\231" +
    "\056\307\060\215\062\221\064\220\065\213\066\212\001" +
    "\001\000\006\047\203\055\201\001\001\000\014\045\175" +
    "\046\163\047\156\054\165\071\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\200\047\156\054\165\071" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\047\231\050\210\056\225\060\215\062\221" +
    "\064\220\065\213\066\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\047\231\064\277\065\213\066\212\001" +
    "\001\000\002\001\001\000\004\061\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\047\231\056\267\060\215\062\221\064\220\065\213\066" +
    "\212\001\001\000\004\057\243\001\001\000\002\001\001" +
    "\000\024\047\231\056\235\060\215\062\221\064\220\065" +
    "\213\066\212\067\234\070\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\047\231\056" +
    "\266\060\215\062\221\064\220\065\213\066\212\001\001" +
    "\000\002\001\001\000\004\057\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\047\231\060\245\062\221\064" +
    "\220\065\213\066\212\001\001\000\002\001\001\000\004" +
    "\061\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\231\062\252\064\220\065\213\066\212\001\001" +
    "\000\002\001\001\000\004\063\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\231\064" +
    "\262\065\213\066\212\001\001\000\002\001\001\000\022" +
    "\047\231\056\235\060\215\062\221\064\220\065\213\066" +
    "\212\070\265\001\001\000\002\001\001\000\020\047\231" +
    "\056\266\060\215\062\221\064\220\065\213\066\212\001" +
    "\001\000\004\057\243\001\001\000\004\057\243\001\001" +
    "\000\002\001\001\000\022\047\231\053\272\056\273\060" +
    "\215\062\221\064\220\065\213\066\212\001\001\000\002" +
    "\001\001\000\004\057\243\001\001\000\020\047\231\056" +
    "\276\060\215\062\221\064\220\065\213\066\212\001\001" +
    "\000\002\001\001\000\004\057\243\001\001\000\002\001" +
    "\001\000\020\047\231\056\302\060\215\062\221\064\220" +
    "\065\213\066\212\001\001\000\002\001\001\000\004\057" +
    "\243\001\001\000\004\047\306\001\001\000\012\046\305" +
    "\047\156\054\165\071\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\243\001\001\000\010\020\115" +
    "\035\311\051\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\115\035\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\317\047\156\054\165\071" +
    "\160\001\001\000\002\001\001\000\012\046\321\047\156" +
    "\054\165\071\160\001\001\000\002\001\001\000\012\046" +
    "\323\047\156\054\165\071\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\047\231\053\335\056" +
    "\273\060\215\062\221\064\220\065\213\066\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\243\001" +
    "\001\000\012\046\341\047\156\054\165\071\160\001\001" +
    "\000\002\001\001\000\012\046\343\047\156\054\165\071" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\243\001\001\000\002\001\001\000\022\047\231\052" +
    "\350\056\351\060\215\062\221\064\220\065\213\066\212" +
    "\001\001\000\002\001\001\000\004\057\243\001\001\000" +
    "\020\047\231\056\355\060\215\062\221\064\220\065\213" +
    "\066\212\001\001\000\020\047\231\056\354\060\215\062" +
    "\221\064\220\065\213\066\212\001\001\000\004\057\243" +
    "\001\001\000\004\057\243\001\001\000\012\046\357\047" +
    "\156\054\165\071\160\001\001\000\002\001\001\000\004" +
    "\057\243\001\001\000\012\046\362\047\156\054\165\071" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\047\231\056\365\060\215\062\221\064\220\065\213\066" +
    "\212\001\001\000\004\057\243\001\001\000\016\010\370" +
    "\011\020\012\016\016\031\036\033\037\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\015\021\372" +
    "\022\046\023\013\001\001\000\002\001\001\000\006\012" +
    "\375\037\374\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\u0100\012\016\017\377\036\033\037\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\015" +
    "\021\u0102\022\046\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u0108\001\001\000\010\042\u0114\043\u0113\044\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u010c" +
    "\001\001\000\044\005\u010d\006\024\007\023\010\022\011" +
    "\020\012\016\013\012\014\040\015\034\016\031\020\015" +
    "\021\017\022\046\023\013\036\033\037\041\054\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\u011c\044\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\015\021\u0128\022\046\023\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\015" +
    "\021\u012b\022\046\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\u0133\007\023\010\022\011\020\012\016\014\040\015\034" +
    "\016\031\020\015\021\017\022\046\023\013\036\033\037" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u0136\001\001\000\004\040\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token.value, cur_token);
	}

	public static void main(String[] args){
		try {
			parser asin = new parser(
					new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // element ::= element expression 
            {
              Element RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(el, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // element ::= expression 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // elementList ::= elementList COMMA element 
            {
              ElementList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElementList el = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e, (String) c, el);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // elementList ::= element 
            {
              ElementList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // primaryExpression ::= variable 
            {
              PrimaryExpression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression(var);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // primaryExpression ::= STRING 
            {
              PrimaryExpression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) string);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // primaryExpression ::= INTEGER 
            {
              PrimaryExpression RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) integer);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // primaryExpression ::= NIL 
            {
              PrimaryExpression RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) nil);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // primaryExpression ::= LEFT_PAR expression RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lp, exp, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // primaryExpression ::= LEFT_BRACKET elementList RIGHT_BRACKET 
            {
              PrimaryExpression RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElementList elm = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lb, elm, (String) rb);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // primaryExpression ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) tid, (String) lp, el, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // unaryOp ::= NOT 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // unaryOp ::= MINUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unaryOp ::= PLUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unaryExpression ::= primaryExpression 
            {
              UnaryExpression RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpression pe = (PrimaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(pe);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unaryExpression ::= unaryOp unaryExpression 
            {
              UnaryExpression RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOp uo = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(uo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // multiplicativeOp ::= IN 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // multiplicativeOp ::= AND 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // multiplicativeOp ::= MOD 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // multiplicativeOp ::= DIV 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // multiplicativeOp ::= DIVIDE 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // multiplicativeOp ::= PRODUCT 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // multiplicativeExpression ::= unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // multiplicativeExpression ::= multiplicativeExpression multiplicativeOp unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MultiplicativeOp mo = (MultiplicativeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(me, mo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // additiveOp ::= OR 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // additiveOp ::= MINUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // additiveOp ::= PLUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // additiveExpression ::= multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // additiveExpression ::= additiveExpression additiveOp multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AdditiveOp ao = (AdditiveOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(ae, ao, me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // relationalOp ::= GREATER_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // relationalOp ::= GREATER_EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // relationalOp ::= NOT_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // relationalOp ::= EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // relationalOp ::= LESS_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relationalOp ::= LESS_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= error 
            {
              Expression RESULT =null;
		
									System.err.println("Error, la expression no tiene operador.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= INT_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= additiveExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression relationalOp additiveExpression 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelationalOp ro = (RelationalOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ex, ro, ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // recordVariableList ::= recordVariableList COMMA variable 
            {
              RecordVariableList RESULT =null;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(rvl, (String) s, v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // recordVariableList ::= variable 
            {
              RecordVariableList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // label ::= INTEGER 
            {
              Label RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Label r = new Label((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expressionList ::= expressionList COMMA expression 
            {
              ExpressionList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(el, (String) s, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expressionList ::= expression 
            {
              ExpressionList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // forList ::= expression DOWNTO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // forList ::= expression TO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // caseList ::= caseList SEMICOLON caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) sc, (String) c, stm, cl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // caseList ::= caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) s, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // subscriptList ::= subscriptList COMMA expression 
            {
              SubscriptList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(sl, (String) s, e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // subscriptList ::= expression 
            {
              SubscriptList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable ::= ID ASIGN 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) a);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable ::= ID DOT ID 
            {
              Variable RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) idl, (String) idr, (String) d);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable ::= ID LEFT_BRACKET subscriptList RIGHT_BRACKET 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) lb, (String) rb, sl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement ::= empty 
            {
              Statement RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement ::= ID 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // statement ::= label COLON statement 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Label lb = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(lb, (String)c, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= BEGIN statementList END 
            {
              Statement RESULT =null;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)beg, sl, (String)end);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= variable expression 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(var, exp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		int whileexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object whileexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)whileexp, exp, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= CASE expression OF caseList END 
            {
              Statement RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String) caseexp, exp, (String)of, cl, (String)endexp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= WITH recordVariableList DO statement 
            {
              Statement RESULT =null;
		int withleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int withright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object with = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)with, rvl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= FOR ID ASIGN forList DO statement 
            {
              Statement RESULT =null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object forexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForList fl = (ForList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)forexp, (String)id, (String)asign, fl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= REPEAT statementList UNTIL expression 
            {
              Statement RESULT =null;
		int rptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int untilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int untilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object until = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rpt, sl, (String)until, exp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= READ_LN LEFT_PAR ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int rdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rdl, (String)lpar, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= WRITE_LN LEFT_PAR ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= WRITE_LN LEFT_PAR STRING_LITERAL RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)sl, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= WRITE_LN LEFT_PAR STRING_LITERAL COMMA ID RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, (String)sl, (String)c, (String)id, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id, (String)lpar, el, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, e, (String)elseexp, f);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statementList ::= statementList SEMICOLON statement 
            {
              StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(sl, (String)sc, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statementList ::= statement 
            {
              StatementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(stm);
									RESULT = r;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameteridList ::= parameteridList COMMA ID 
            {
              ParameterIdList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pl = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList(pl, (String)c, (String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameteridList ::= ID 
            {
              ParameterIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // formalParameterSection ::= FUNCTION ID parameters COLON ID 
            {
              FormalParameterSection RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) func, (String) idl, params, (String) colon, (String) idr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // formalParameterSection ::= PROCEDURE ID parameters 
            {
              FormalParameterSection RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) proc, (String) id, params);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // formalParameterSection ::= VAR parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) var, pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formalParameterSection ::= parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection(pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // formalParameterList ::= formalParameterList SEMICOLON formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fpl, (String) sc, fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // formalParameterList ::= formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parameters ::= LEFT_PAR formalParameterList RIGHT_PAR 
            {
              Parameters RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Parameters r = new Parameters((String) lpar, fpl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // blockOrForward ::= SEMICOLON FORWARD 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, (String) fw);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // blockOrForward ::= SEMICOLON block 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, bl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procOrFunc ::= FUNCTION ID parameters COLON ID blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward bof = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) func, (String) idl, (String) idr, par, bof, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procOrFunc ::= PROCEDURE ID parameters blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward blo = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) proc, (String) id, par, blo);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procAndFuncDeclaration ::= procAndFuncDeclaration SEMICOLON procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pafdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pafdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration pafd = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pafd, (String) sc, pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procAndFuncDeclaration ::= procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // caseLabelList ::= caseLabelList COMMA constant 
            {
              CaseLabelList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant con = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(cll, (String) comma, con);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // caseLabelList ::= constant 
            {
              CaseLabelList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variant ::= caseLabelList COLON LEFT_PAR fieldList RIGHT_PAR 
            {
              Variant RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variant r = new Variant(cll, (String) colon, (String) lpar, fl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variant ::= empty 
            {
              Variant RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variantList ::= variantList SEMICOLON variant 
            {
              VariantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari, (String) sc, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variantList ::= variant 
            {
              VariantList RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tagField ::= ID COLON ID 
            {
              TagField RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) idl, (String) idr, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tagField ::= ID 
            {
              TagField RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variantPart ::= CASE tagField OF variantList 
            {
              VariantPart RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TagField tf = (TagField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantPart r = new VariantPart((String) caseexp, tf, (String) of, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantPart",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldidList ::= fieldidList COMMA ID 
            {
              FieldIdList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList(fl, (String) comma, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fieldidList ::= ID 
            {
              FieldIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // recordField ::= fieldidList COLON type 
            {
              RecordField RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordField r = new RecordField(fl, (String) colon, type);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // recordField ::= empty 
            {
              RecordField RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // fixedPart ::= fixedPart SEMICOLON recordField 
            {
              FixedPart RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(fp, (String) sc, rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fixedPart ::= recordField 
            {
              FixedPart RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fieldList ::= variantPart 
            {
              FieldList RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fieldList ::= fixedPart SEMICOLON variantPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp, (String) sc, vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fieldList ::= fixedPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // indexList ::= indexList COMMA simpleType 
            {
              IndexList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(il, (String) comma, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // indexList ::= simpleType 
            {
              IndexList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structuredType ::= PACKED structuredType 
            {
              StructuredType RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) p, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // structuredType ::= FILE OF type 
            {
              StructuredType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) f, t);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // structuredType ::= SET OF simpleType 
            {
              StructuredType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) s, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structuredType ::= RECORD fieldList END 
            {
              StructuredType RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) e, (String) rec, fl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structuredType ::= ARRAY LEFT_BRACKET indexList RIGHT_BRACKET OF type 
            {
              StructuredType RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) arr, (String) lbra, (String) rbra, (String) of, il, ty);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simpleType ::= ID 
            {
              SimpleType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simpleType ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              SimpleType RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) lpar, (String) rpar, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= constant 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant st = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= structuredType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= error 
            {
              Type RESULT =null;
		
									System.err.println("Error de sintaxis al momento de declarar una etiqueta.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // constant ::= STRING 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // constant ::= INTEGER 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
;									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variableidList ::= variableidList COMMA ID 
            {
              VariableIdList RESULT =null;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableIdList r = new VariableIdList((String) id, (String) c, vil);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variableidList ::= ID 
            {
              VariableIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	VariableIdList r = new VariableIdList((String) id);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variableDeclaration ::= variableDeclaration SEMICOLON variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) c, (String) sc, vil, vd,t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variableDeclaration ::= VAR variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) var, (String) c, vil, t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typeDeclaration ::= typeDeclaration SEMICOLON ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeDeclaration td = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		TypeDeclaration r = new TypeDeclaration((String) id, (String) e, (String) sc, t, td);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typeDeclaration ::= type ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tl = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tr = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	TypeDeclaration r = new TypeDeclaration((String) id, (String) e, tl, tr);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constantDeclaration ::= constantDeclaration SEMICOLON ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ConstantDeclaration cd = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) id, (String) eq, (String) sc, cons, cd);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constantDeclaration ::= CONST ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) c, (String) id, (String) eq, cons);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // labelDeclaration ::= labelDeclaration COMMA INTEGER 
            {
              LabelDeclaration RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration ld = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(ld, (String) i, (String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // labelDeclaration ::= label INTEGER 
            {
              LabelDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(l, (String) i);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block5 ::= BEGIN statementList END 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(sl, (String) b, (String) e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block5",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block4 ::= block5 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block4 ::= procAndFuncDeclaration SEMICOLON block5 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration d = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // block3 ::= block4 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block3 ::= variableDeclaration SEMICOLON block4 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration d = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block2 ::= block3 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block2 ::= typeDeclaration SEMICOLON block3 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeDeclaration d = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block1 ::= block2 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block1 ::= constantDeclaration SEMICOLON block2 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstantDeclaration d = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block ::= block1 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= labelDeclaration SEMICOLON block1 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration d = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programHeading ::= empty 
            {
              ProgramHeading RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programHeading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programHeading ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              ProgramHeading RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProgramHeading r = new ProgramHeading(il);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programHeading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pascalProgram ::= PROGRAM ID programHeading SEMICOLON block DOT 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									System.err.println("Falta un END al final del bloque principal.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pascalProgram ::= PROGRAM ID programHeading SEMICOLON block END error 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
									System.err.println("Falta un . al final del bloque principal.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pascalProgram ::= PROGRAM ID programHeading SEMICOLON block END DOT 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									  PascalProgram r = new PascalProgram((String) id, ph, b);
									  RESULT = r;
									  parser.root = RESULT;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID programHeading block END DOT 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
									System.err.println("Falta un ; en la declaraion inicial del bloque principal.");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

