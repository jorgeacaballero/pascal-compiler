
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 25 14:24:34 CST 2017
//----------------------------------------------------

package pascal.compiler;

import java_cup.runtime.*;
import java.io.FileReader;
import pascal.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 25 14:24:34 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\004\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\013\004\000\002\013\005\000\002\014\006" +
    "\000\002\014\007\000\002\015\006\000\002\015\007\000" +
    "\002\016\006\000\002\016\007\000\002\017\003\000\002" +
    "\017\005\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\005" +
    "\000\002\022\003\000\002\023\010\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\005\000\002\025\003\000\002\026\003\000\002\026\005" +
    "\000\002\027\003\000\002\027\005\000\002\030\003\000" +
    "\002\030\005\000\002\031\006\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\005\000\002\034" +
    "\003\000\002\034\007\000\002\035\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\005\000\002\037\006\000" +
    "\002\037\010\000\002\040\004\000\002\040\004\000\002" +
    "\041\005\000\002\042\003\000\002\042\005\000\002\043" +
    "\005\000\002\043\006\000\002\043\005\000\002\043\007" +
    "\000\002\044\003\000\002\044\005\000\002\045\003\000" +
    "\002\045\005\000\002\046\010\000\002\046\006\000\002" +
    "\046\006\000\002\046\006\000\002\046\006\000\002\046" +
    "\010\000\002\046\006\000\002\046\007\000\002\046\006" +
    "\000\002\046\006\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\046\003\000\002" +
    "\047\006\000\002\047\005\000\002\047\004\000\002\050" +
    "\003\000\002\050\005\000\002\051\005\000\002\051\007" +
    "\000\002\052\005\000\002\052\005\000\002\053\003\000" +
    "\002\053\005\000\002\054\003\000\002\055\003\000\002" +
    "\055\005\000\002\056\005\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\060\005\000\002\060\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\062" +
    "\005\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\004\000\002\064\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\066" +
    "\006\000\002\066\005\000\002\066\005\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\067\003\000\002\067\005\000\002\070\003\000\002" +
    "\070\004\000\002\071\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\004\005\001\002\000\004\002\u012f\001" +
    "\002\000\004\062\006\001\002\000\004\033\007\001\002" +
    "\000\004\062\144\001\002\000\004\037\011\001\002\000" +
    "\036\005\035\010\047\011\044\016\026\024\012\025\043" +
    "\031\050\033\037\060\046\062\032\064\036\065\042\066" +
    "\020\067\025\001\002\000\004\062\u012a\001\002\000\006" +
    "\037\u0127\041\u0126\001\002\000\012\006\uffe4\034\uffe4\037" +
    "\uffe4\062\uffe4\001\002\000\012\006\uffe3\034\uffe3\037\uffe3" +
    "\062\uffe3\001\002\000\006\037\ufff3\042\ufff3\001\002\000" +
    "\004\062\u0123\001\002\000\004\022\u0121\001\002\000\006" +
    "\037\ufff5\042\ufff5\001\002\000\006\037\ufff7\042\ufff7\001" +
    "\002\000\006\037\ufff9\042\ufff9\001\002\000\006\037\ufffb" +
    "\042\ufffb\001\002\000\014\010\047\025\043\065\042\066" +
    "\020\067\025\001\002\000\004\062\u0100\001\002\000\004" +
    "\060\377\001\002\000\004\037\372\001\002\000\004\042" +
    "\371\001\002\000\016\006\uffe1\034\uffe1\036\uffe1\037\uffe1" +
    "\041\uffe1\062\uffe1\001\002\000\004\037\366\001\002\000" +
    "\004\037\361\001\002\000\034\005\167\006\uff72\015\154" +
    "\017\160\032\152\037\uff72\060\153\061\166\062\161\070" +
    "\164\072\151\077\163\100\170\001\002\000\016\006\uffe6" +
    "\034\uffe6\037\uffe6\040\uffe6\041\uffe6\062\uffe6\001\002\000" +
    "\004\062\144\001\002\000\004\037\137\001\002\000\004" +
    "\037\uffc7\001\002\000\004\022\135\001\002\000\012\006" +
    "\uff72\037\uff72\062\073\070\101\001\002\000\004\062\070" +
    "\001\002\000\012\006\uffe5\034\uffe5\037\uffe5\062\uffe5\001" +
    "\002\000\006\060\uff9c\062\uffe7\001\002\000\004\035\060" +
    "\001\002\000\004\062\051\001\002\000\006\040\uffe9\041" +
    "\uffe9\001\002\000\006\040\054\041\053\001\002\000\004" +
    "\062\057\001\002\000\024\010\047\025\043\033\037\060" +
    "\055\062\032\064\036\065\042\066\020\067\025\001\002" +
    "\000\016\006\uffe7\034\uffe7\037\uffe7\040\uffe7\041\uffe7\062" +
    "\uffe7\001\002\000\004\037\uffeb\001\002\000\006\040\uffe8" +
    "\041\uffe8\001\002\000\006\033\037\062\032\001\002\000" +
    "\006\036\064\041\063\001\002\000\006\036\uffdb\041\uffdb" +
    "\001\002\000\006\033\037\062\032\001\002\000\004\022" +
    "\065\001\002\000\024\010\047\025\043\033\037\060\055" +
    "\062\032\064\036\065\042\066\020\067\025\001\002\000" +
    "\012\006\uffe0\034\uffe0\037\uffe0\062\uffe0\001\002\000\006" +
    "\036\uffda\041\uffda\001\002\000\004\052\071\001\002\000" +
    "\006\060\055\064\036\001\002\000\004\037\uffef\001\002" +
    "\000\006\040\uffd2\041\uffd2\001\002\000\004\006\134\001" +
    "\002\000\010\006\uffd9\034\uffd9\037\131\001\002\000\006" +
    "\006\uffd7\034\uffd7\001\002\000\010\006\uffd4\034\uffd4\037" +
    "\uffd4\001\002\000\010\006\uffd6\034\uffd6\037\uffd6\001\002" +
    "\000\004\062\107\001\002\000\006\040\104\041\103\001" +
    "\002\000\004\062\106\001\002\000\024\010\047\025\043" +
    "\033\037\060\055\062\032\064\036\065\042\066\020\067" +
    "\025\001\002\000\010\006\uffd3\034\uffd3\037\uffd3\001\002" +
    "\000\006\040\uffd1\041\uffd1\001\002\000\006\022\uffcf\040" +
    "\127\001\002\000\004\022\111\001\002\000\014\006\uff72" +
    "\034\uff72\037\uff72\060\055\064\036\001\002\000\010\006" +
    "\uffd0\034\uffd0\037\125\001\002\000\010\006\uffcd\034\uffcd" +
    "\037\uffcd\001\002\000\006\040\uffc9\041\uffc9\001\002\000" +
    "\006\040\120\041\117\001\002\000\010\006\uffcb\034\uffcb" +
    "\037\uffcb\001\002\000\006\060\055\064\036\001\002\000" +
    "\004\033\121\001\002\000\012\034\uff72\037\uff72\062\073" +
    "\070\101\001\002\000\004\034\123\001\002\000\010\006" +
    "\uffca\034\uffca\037\uffca\001\002\000\006\040\uffc8\041\uffc8" +
    "\001\002\000\014\006\uff72\034\uff72\037\uff72\060\055\064" +
    "\036\001\002\000\010\006\uffcc\034\uffcc\037\uffcc\001\002" +
    "\000\004\062\130\001\002\000\004\022\uffce\001\002\000" +
    "\014\006\uff72\034\uff72\037\uff72\062\073\070\101\001\002" +
    "\000\006\006\uffd8\034\uffd8\001\002\000\010\006\uffd5\034" +
    "\uffd5\037\uffd5\001\002\000\012\006\uffdf\034\uffdf\037\uffdf" +
    "\062\uffdf\001\002\000\006\033\037\062\032\001\002\000" +
    "\012\006\uffde\034\uffde\037\uffde\062\uffde\001\002\000\034" +
    "\005\035\010\047\016\026\024\012\025\043\031\050\033" +
    "\037\060\055\062\141\064\036\065\042\066\020\067\025" +
    "\001\002\000\006\037\ufffa\042\ufffa\001\002\000\006\052" +
    "\142\062\uffe1\001\002\000\006\060\055\064\036\001\002" +
    "\000\004\037\uffee\001\002\000\006\034\ufffe\041\ufffe\001" +
    "\002\000\006\034\147\041\146\001\002\000\004\062\150" +
    "\001\002\000\016\006\uffe2\034\uffe2\036\uffe2\037\uffe2\041" +
    "\uffe2\062\uffe2\001\002\000\006\034\ufffd\041\ufffd\001\002" +
    "\000\034\005\167\015\154\017\160\032\152\037\uff72\060" +
    "\153\061\166\062\161\070\164\072\151\073\uff72\077\163" +
    "\100\170\001\002\000\030\003\212\020\200\021\175\033" +
    "\206\035\211\044\172\045\210\060\214\062\201\064\205" +
    "\102\204\001\002\000\004\040\uff9c\001\002\000\004\062" +
    "\341\001\002\000\030\003\212\020\200\021\175\033\206" +
    "\035\211\044\172\045\210\060\214\062\201\064\205\102" +
    "\204\001\002\000\006\006\336\037\274\001\002\000\012" +
    "\006\uffa8\014\uffa8\037\uffa8\073\uffa8\001\002\000\030\003" +
    "\212\020\200\021\175\033\206\035\211\044\172\045\210" +
    "\060\214\062\201\064\205\102\204\001\002\000\022\006" +
    "\uffa9\014\uffa9\033\326\035\255\037\uffa9\042\256\043\254" +
    "\073\uffa9\001\002\000\010\006\uffb8\037\uffb8\073\uffb8\001" +
    "\002\000\004\033\323\001\002\000\030\003\212\020\200" +
    "\021\175\033\206\035\211\044\172\045\210\060\214\062" +
    "\201\064\205\102\204\001\002\000\004\040\306\001\002" +
    "\000\004\062\300\001\002\000\034\005\167\006\uff72\015" +
    "\154\017\160\032\152\037\uff72\060\153\061\166\062\161" +
    "\070\164\072\151\077\163\100\170\001\002\000\004\033" +
    "\171\001\002\000\030\003\212\020\200\021\175\033\206" +
    "\035\211\044\172\045\210\060\214\062\201\064\205\102" +
    "\204\001\002\000\024\020\uff80\021\uff80\033\uff80\035\uff80" +
    "\044\uff80\045\uff80\060\uff80\062\uff80\064\uff80\001\002\000" +
    "\024\020\200\021\175\033\206\035\211\044\172\045\210" +
    "\060\214\062\201\064\205\001\002\000\112\003\uff81\006" +
    "\uff81\007\uff81\012\uff81\013\uff81\014\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\026\uff81\027\uff81\030\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\037\uff81\041\uff81\044\uff81\045\uff81" +
    "\046\uff81\047\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055" +
    "\uff81\056\uff81\057\uff81\060\uff81\062\uff81\063\uff81\064\uff81" +
    "\073\uff81\102\uff81\001\002\000\024\020\uff7e\021\uff7e\033" +
    "\uff7e\035\uff7e\044\uff7e\045\uff7e\060\uff7e\062\uff7e\064\uff7e" +
    "\001\002\000\076\003\uff98\006\uff98\013\uff98\014\uff98\020" +
    "\uff98\021\uff98\022\uff98\023\233\026\uff98\027\uff98\030\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\041\uff98\044" +
    "\230\045\231\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\062\uff98\064\uff98\073\uff98\102\uff98\001" +
    "\002\000\006\034\271\041\266\001\002\000\112\003\uff7a" +
    "\006\uff7a\007\uff7a\012\uff7a\013\uff7a\014\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\026\uff7a\027\uff7a\030\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\041\uff7a\044\uff7a\045" +
    "\uff7a\046\uff7a\047\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\057\uff7a\060\uff7a\062\uff7a\063\uff7a\064" +
    "\uff7a\073\uff7a\102\uff7a\001\002\000\012\033\253\035\255" +
    "\042\256\043\254\001\002\000\112\003\uff89\006\uff89\007" +
    "\uff89\012\uff89\013\uff89\014\uff89\020\uff89\021\uff89\022\uff89" +
    "\023\uff89\026\uff89\027\uff89\030\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\041\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\057\uff89\060\uff89\062\uff89\063\uff89\064\uff89\073\uff89" +
    "\102\uff89\001\002\000\112\003\uff8e\006\uff8e\007\237\012" +
    "\242\013\uff8e\014\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\033\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\037\uff8e\041\uff8e\044\uff8e\045\uff8e\046\241\047\240" +
    "\051\235\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\062\uff8e\063\236\064\uff8e\073\uff8e\102\uff8e" +
    "\001\002\000\074\003\uff97\006\uff97\013\uff97\014\uff97\020" +
    "\uff97\021\uff97\022\uff97\026\uff97\027\uff97\030\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\037\uff97\041\uff97\044\uff97\045" +
    "\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\062\uff97\064\uff97\073\uff97\102\uff97\001\002\000" +
    "\112\003\uff78\006\uff78\007\uff78\012\uff78\013\uff78\014\uff78" +
    "\020\uff78\021\uff78\022\uff78\023\uff78\026\uff78\027\uff78\030" +
    "\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\041\uff78" +
    "\044\uff78\045\uff78\046\uff78\047\uff78\051\uff78\052\uff78\053" +
    "\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060\uff78\062\uff78" +
    "\063\uff78\064\uff78\073\uff78\102\uff78\001\002\000\030\003" +
    "\212\020\200\021\175\033\206\035\211\044\172\045\210" +
    "\060\214\062\201\064\205\102\204\001\002\000\022\034" +
    "\uff9e\041\uff9e\052\222\053\220\054\223\055\221\056\224" +
    "\057\226\001\002\000\024\020\uff7f\021\uff7f\033\uff7f\035" +
    "\uff7f\044\uff7f\045\uff7f\060\uff7f\062\uff7f\064\uff7f\001\002" +
    "\000\030\003\212\020\200\021\175\033\206\035\211\044" +
    "\172\045\210\060\214\062\201\064\205\102\204\001\002" +
    "\000\074\003\uff96\006\uff96\013\uff96\014\uff96\020\uff96\021" +
    "\uff96\022\uff96\026\uff96\027\uff96\030\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\041\uff96\044\uff96\045\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\062\uff96\064\uff96\073\uff96\102\uff96\001\002\000\112\003" +
    "\uff77\006\uff77\007\uff77\012\uff77\013\uff77\014\uff77\020\uff77" +
    "\021\uff77\022\uff77\023\uff77\026\uff77\027\uff77\030\uff77\033" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\041\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\062\uff77\063\uff77" +
    "\064\uff77\073\uff77\102\uff77\001\002\000\112\003\uff79\006" +
    "\uff79\007\uff79\012\uff79\013\uff79\014\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\026\uff79\027\uff79\030\uff79\033\uff79\034" +
    "\uff79\035\uff79\036\uff79\037\uff79\041\uff79\044\uff79\045\uff79" +
    "\046\uff79\047\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055" +
    "\uff79\056\uff79\057\uff79\060\uff79\062\uff79\063\uff79\064\uff79" +
    "\073\uff79\102\uff79\001\002\000\034\003\212\020\200\021" +
    "\175\033\206\035\211\036\uff76\041\uff76\044\172\045\210" +
    "\060\214\062\201\064\205\102\204\001\002\000\006\036" +
    "\246\041\245\001\002\000\050\003\uff74\020\uff74\021\uff74" +
    "\033\uff74\035\uff74\036\uff74\041\uff74\044\uff74\045\uff74\052" +
    "\222\053\220\054\223\055\221\056\224\057\226\060\uff74" +
    "\062\uff74\064\uff74\102\uff74\001\002\000\024\020\uff92\021" +
    "\uff92\033\uff92\035\uff92\044\uff92\045\uff92\060\uff92\062\uff92" +
    "\064\uff92\001\002\000\024\020\uff95\021\uff95\033\uff95\035" +
    "\uff95\044\uff95\045\uff95\060\uff95\062\uff95\064\uff95\001\002" +
    "\000\024\020\uff93\021\uff93\033\uff93\035\uff93\044\uff93\045" +
    "\uff93\060\uff93\062\uff93\064\uff93\001\002\000\024\020\uff90" +
    "\021\uff90\033\uff90\035\uff90\044\uff90\045\uff90\060\uff90\062" +
    "\uff90\064\uff90\001\002\000\024\020\uff91\021\uff91\033\uff91" +
    "\035\uff91\044\uff91\045\uff91\060\uff91\062\uff91\064\uff91\001" +
    "\002\000\024\020\200\021\175\033\206\035\211\044\172" +
    "\045\210\060\214\062\201\064\205\001\002\000\024\020" +
    "\uff94\021\uff94\033\uff94\035\uff94\044\uff94\045\uff94\060\uff94" +
    "\062\uff94\064\uff94\001\002\000\076\003\uff99\006\uff99\013" +
    "\uff99\014\uff99\020\uff99\021\uff99\022\uff99\023\233\026\uff99" +
    "\027\uff99\030\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\041\uff99\044\230\045\231\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\062\uff99\064\uff99\073" +
    "\uff99\102\uff99\001\002\000\024\020\uff8d\021\uff8d\033\uff8d" +
    "\035\uff8d\044\uff8d\045\uff8d\060\uff8d\062\uff8d\064\uff8d\001" +
    "\002\000\024\020\uff8c\021\uff8c\033\uff8c\035\uff8c\044\uff8c" +
    "\045\uff8c\060\uff8c\062\uff8c\064\uff8c\001\002\000\024\020" +
    "\200\021\175\033\206\035\211\044\172\045\210\060\214" +
    "\062\201\064\205\001\002\000\024\020\uff8b\021\uff8b\033" +
    "\uff8b\035\uff8b\044\uff8b\045\uff8b\060\uff8b\062\uff8b\064\uff8b" +
    "\001\002\000\112\003\uff8f\006\uff8f\007\237\012\242\013" +
    "\uff8f\014\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\041\uff8f\044\uff8f\045\uff8f\046\241\047\240\051\235" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\062\uff8f\063\236\064\uff8f\073\uff8f\102\uff8f\001\002" +
    "\000\024\020\uff85\021\uff85\033\uff85\035\uff85\044\uff85\045" +
    "\uff85\060\uff85\062\uff85\064\uff85\001\002\000\024\020\uff83" +
    "\021\uff83\033\uff83\035\uff83\044\uff83\045\uff83\060\uff83\062" +
    "\uff83\064\uff83\001\002\000\024\020\uff84\021\uff84\033\uff84" +
    "\035\uff84\044\uff84\045\uff84\060\uff84\062\uff84\064\uff84\001" +
    "\002\000\024\020\uff88\021\uff88\033\uff88\035\uff88\044\uff88" +
    "\045\uff88\060\uff88\062\uff88\064\uff88\001\002\000\024\020" +
    "\uff87\021\uff87\033\uff87\035\uff87\044\uff87\045\uff87\060\uff87" +
    "\062\uff87\064\uff87\001\002\000\024\020\uff86\021\uff86\033" +
    "\uff86\035\uff86\044\uff86\045\uff86\060\uff86\062\uff86\064\uff86" +
    "\001\002\000\024\020\200\021\175\033\206\035\211\044" +
    "\172\045\210\060\214\062\201\064\205\001\002\000\112" +
    "\003\uff8a\006\uff8a\007\uff8a\012\uff8a\013\uff8a\014\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\041\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\073\uff8a\102\uff8a\001\002\000\030\003\212" +
    "\020\200\021\175\033\206\035\211\044\172\045\210\060" +
    "\214\062\201\064\205\102\204\001\002\000\112\003\uff7c" +
    "\006\uff7c\007\uff7c\012\uff7c\013\uff7c\014\uff7c\020\uff7c\021" +
    "\uff7c\022\uff7c\023\uff7c\026\uff7c\027\uff7c\030\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\041\uff7c\044\uff7c\045" +
    "\uff7c\046\uff7c\047\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c" +
    "\055\uff7c\056\uff7c\057\uff7c\060\uff7c\062\uff7c\063\uff7c\064" +
    "\uff7c\073\uff7c\102\uff7c\001\002\000\034\003\212\020\200" +
    "\021\175\033\206\035\211\036\uff75\041\uff75\044\172\045" +
    "\210\060\214\062\201\064\205\102\204\001\002\000\050" +
    "\003\uff73\020\uff73\021\uff73\033\uff73\035\uff73\036\uff73\041" +
    "\uff73\044\uff73\045\uff73\052\222\053\220\054\223\055\221" +
    "\056\224\057\226\060\uff73\062\uff73\064\uff73\102\uff73\001" +
    "\002\000\020\034\252\052\222\053\220\054\223\055\221" +
    "\056\224\057\226\001\002\000\112\003\uff7b\006\uff7b\007" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\026\uff7b\027\uff7b\030\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\036\uff7b\037\uff7b\041\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\062\uff7b\063\uff7b\064\uff7b\073\uff7b" +
    "\102\uff7b\001\002\000\030\003\212\020\200\021\175\033" +
    "\206\035\211\044\172\045\210\060\214\062\201\064\205" +
    "\102\204\001\002\000\112\003\uffa5\006\uffa5\007\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\033\uffa5\034\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\062\uffa5\063\uffa5\064\uffa5\073\uffa5\102\uffa5" +
    "\001\002\000\030\003\212\020\200\021\175\033\206\035" +
    "\211\044\172\045\210\060\214\062\201\064\205\102\204" +
    "\001\002\000\004\062\257\001\002\000\112\003\uffa6\006" +
    "\uffa6\007\uffa6\012\uffa6\013\uffa6\014\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\026\uffa6\027\uffa6\030\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\037\uffa6\041\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\073\uffa6\102\uffa6\001\002\000\006\036\263\041\262\001" +
    "\002\000\022\036\uffa4\041\uffa4\052\222\053\220\054\223" +
    "\055\221\056\224\057\226\001\002\000\030\003\212\020" +
    "\200\021\175\033\206\035\211\044\172\045\210\060\214" +
    "\062\201\064\205\102\204\001\002\000\112\003\uffa7\006" +
    "\uffa7\007\uffa7\012\uffa7\013\uffa7\014\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\026\uffa7\027\uffa7\030\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\060\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\073\uffa7\102\uffa7\001\002\000\022\036\uffa3\041\uffa3\052" +
    "\222\053\220\054\223\055\221\056\224\057\226\001\002" +
    "\000\006\034\267\041\266\001\002\000\030\003\212\020" +
    "\200\021\175\033\206\035\211\044\172\045\210\060\214" +
    "\062\201\064\205\102\204\001\002\000\112\003\uff7d\006" +
    "\uff7d\007\uff7d\012\uff7d\013\uff7d\014\uff7d\020\uff7d\021\uff7d" +
    "\022\uff7d\023\uff7d\026\uff7d\027\uff7d\030\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\037\uff7d\041\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\047\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055" +
    "\uff7d\056\uff7d\057\uff7d\060\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\073\uff7d\102\uff7d\001\002\000\022\034\uff9d\041\uff9d\052" +
    "\222\053\220\054\223\055\221\056\224\057\226\001\002" +
    "\000\012\006\uffb3\014\uffb3\037\uffb3\073\uffb3\001\002\000" +
    "\112\003\uff82\006\uff82\007\uff82\012\uff82\013\uff82\014\uff82" +
    "\020\uff82\021\uff82\022\uff82\023\uff82\026\uff82\027\uff82\030" +
    "\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\041\uff82" +
    "\044\uff82\045\uff82\046\uff82\047\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\062\uff82" +
    "\063\uff82\064\uff82\073\uff82\102\uff82\001\002\000\006\006" +
    "\275\037\274\001\002\000\036\005\167\006\uff72\015\154" +
    "\017\160\032\152\037\uff72\060\153\061\166\062\161\070" +
    "\164\072\151\073\uff72\077\163\100\170\001\002\000\012" +
    "\006\uffab\014\uffab\037\uffab\073\uffab\001\002\000\010\006" +
    "\uffb7\037\uffb7\073\uffb7\001\002\000\006\013\303\041\302" +
    "\001\002\000\010\035\255\042\256\043\254\001\002\000" +
    "\006\013\uff9b\041\uff9b\001\002\000\004\062\300\001\002" +
    "\000\040\005\167\006\uff72\014\uff72\015\154\017\160\032" +
    "\152\037\uff72\060\153\061\166\062\161\070\164\072\151" +
    "\073\uff72\077\163\100\170\001\002\000\012\006\uffb0\014" +
    "\uffb0\037\uffb0\073\uffb0\001\002\000\006\013\uff9a\041\uff9a" +
    "\001\002\000\040\005\167\006\uff72\014\uff72\015\154\017" +
    "\160\032\152\037\uff72\060\153\061\166\062\161\070\164" +
    "\072\151\073\uff72\077\163\100\170\001\002\000\012\006" +
    "\uffaa\014\uffaa\037\uffaa\073\uffaa\001\002\000\020\022\311" +
    "\052\222\053\220\054\223\055\221\056\224\057\226\001" +
    "\002\000\006\060\055\064\036\001\002\000\006\040\321" +
    "\041\117\001\002\000\006\006\315\037\314\001\002\000" +
    "\006\060\055\064\036\001\002\000\012\006\uffaf\014\uffaf" +
    "\037\uffaf\073\uffaf\001\002\000\006\040\317\041\117\001" +
    "\002\000\034\005\167\006\uff72\015\154\017\160\032\152" +
    "\037\uff72\060\153\061\166\062\161\070\164\072\151\077" +
    "\163\100\170\001\002\000\006\006\uffa1\037\uffa1\001\002" +
    "\000\034\005\167\006\uff72\015\154\017\160\032\152\037" +
    "\uff72\060\153\061\166\062\161\070\164\072\151\077\163" +
    "\100\170\001\002\000\006\006\uffa2\037\uffa2\001\002\000" +
    "\030\003\212\020\200\021\175\033\206\035\211\044\172" +
    "\045\210\060\214\062\201\064\205\102\204\001\002\000" +
    "\006\034\325\041\266\001\002\000\012\006\uffb4\014\uffb4" +
    "\037\uffb4\073\uffb4\001\002\000\030\003\212\020\200\021" +
    "\175\033\206\035\211\044\172\045\210\060\214\062\201" +
    "\064\205\102\204\001\002\000\006\034\330\041\266\001" +
    "\002\000\012\006\uffb5\014\uffb5\037\uffb5\073\uffb5\001\002" +
    "\000\020\026\332\052\222\053\220\054\223\055\221\056" +
    "\224\057\226\001\002\000\040\005\167\006\uff72\014\uff72" +
    "\015\154\017\160\032\152\037\uff72\060\153\061\166\062" +
    "\161\070\164\072\151\073\uff72\077\163\100\170\001\002" +
    "\000\012\006\uffad\014\334\037\uffad\073\uffad\001\002\000" +
    "\040\005\167\006\uff72\014\uff72\015\154\017\160\032\152" +
    "\037\uff72\060\153\061\166\062\161\070\164\072\151\073" +
    "\uff72\077\163\100\170\001\002\000\012\006\uffb6\014\uffb6" +
    "\037\uffb6\073\uffb6\001\002\000\006\037\ufff2\042\ufff2\001" +
    "\002\000\020\037\340\052\222\053\220\054\223\055\221" +
    "\056\224\057\226\001\002\000\012\006\uffac\014\uffac\037" +
    "\uffac\073\uffac\001\002\000\004\043\342\001\002\000\030" +
    "\003\212\020\200\021\175\033\206\035\211\044\172\045" +
    "\210\060\214\062\201\064\205\102\204\001\002\000\004" +
    "\013\351\001\002\000\022\027\345\030\346\052\222\053" +
    "\220\054\223\055\221\056\224\057\226\001\002\000\030" +
    "\003\212\020\200\021\175\033\206\035\211\044\172\045" +
    "\210\060\214\062\201\064\205\102\204\001\002\000\030" +
    "\003\212\020\200\021\175\033\206\035\211\044\172\045" +
    "\210\060\214\062\201\064\205\102\204\001\002\000\020" +
    "\013\uff9f\052\222\053\220\054\223\055\221\056\224\057" +
    "\226\001\002\000\020\013\uffa0\052\222\053\220\054\223" +
    "\055\221\056\224\057\226\001\002\000\040\005\167\006" +
    "\uff72\014\uff72\015\154\017\160\032\152\037\uff72\060\153" +
    "\061\166\062\161\070\164\072\151\073\uff72\077\163\100" +
    "\170\001\002\000\012\006\uffb1\014\uffb1\037\uffb1\073\uffb1" +
    "\001\002\000\020\013\354\052\222\053\220\054\223\055" +
    "\221\056\224\057\226\001\002\000\040\005\167\006\uff72" +
    "\014\uff72\015\154\017\160\032\152\037\uff72\060\153\061" +
    "\166\062\161\070\164\072\151\073\uff72\077\163\100\170" +
    "\001\002\000\012\006\uffae\014\uffae\037\uffae\073\uffae\001" +
    "\002\000\006\037\274\073\357\001\002\000\030\003\212" +
    "\020\200\021\175\033\206\035\211\044\172\045\210\060" +
    "\214\062\201\064\205\102\204\001\002\000\026\006\uffb2" +
    "\014\uffb2\037\uffb2\052\222\053\220\054\223\055\221\056" +
    "\224\057\226\073\uffb2\001\002\000\014\005\035\016\026" +
    "\024\012\031\050\062\362\001\002\000\004\052\364\001" +
    "\002\000\006\037\ufff8\042\ufff8\001\002\000\024\010\047" +
    "\025\043\033\037\060\055\062\032\064\036\065\042\066" +
    "\020\067\025\001\002\000\004\037\uffec\001\002\000\010" +
    "\005\035\016\026\024\012\001\002\000\004\037\uffc6\001" +
    "\002\000\006\037\ufff4\042\ufff4\001\002\000\004\002\000" +
    "\001\002\000\012\005\035\016\026\024\012\062\051\001" +
    "\002\000\006\040\375\041\053\001\002\000\006\037\ufff6" +
    "\042\ufff6\001\002\000\024\010\047\025\043\033\037\060" +
    "\055\062\032\064\036\065\042\066\020\067\025\001\002" +
    "\000\004\037\uffea\001\002\000\006\037\ufff1\041\ufff1\001" +
    "\002\000\004\033\u0101\001\002\000\012\016\u010c\024\u010b" +
    "\031\u0109\062\u010a\001\002\000\004\040\u0103\001\002\000" +
    "\004\062\u0104\001\002\000\004\037\u0105\001\002\000\040" +
    "\005\035\010\047\011\044\016\026\024\012\025\043\031" +
    "\050\033\037\060\046\062\032\064\036\065\042\066\020" +
    "\067\025\071\u0108\001\002\000\004\037\uffc4\001\002\000" +
    "\004\037\uffc3\001\002\000\004\037\uffc2\001\002\000\004" +
    "\062\u010a\001\002\000\006\040\uffba\041\uffba\001\002\000" +
    "\004\062\u011b\001\002\000\004\062\u0117\001\002\000\006" +
    "\040\u0114\041\u0113\001\002\000\006\034\uffc0\037\uffc0\001" +
    "\002\000\006\034\u0111\037\u0110\001\002\000\012\016\u010c" +
    "\024\u010b\031\u0109\062\u010a\001\002\000\010\034\uffc1\037" +
    "\uffc1\040\uffc1\001\002\000\006\034\uffbf\037\uffbf\001\002" +
    "\000\004\062\u0116\001\002\000\004\062\u0115\001\002\000" +
    "\006\034\uffbe\037\uffbe\001\002\000\006\040\uffb9\041\uffb9" +
    "\001\002\000\004\033\u0101\001\002\000\004\040\u0119\001" +
    "\002\000\004\062\u011a\001\002\000\006\034\uffbb\037\uffbb" +
    "\001\002\000\004\033\u0101\001\002\000\006\034\uffbc\037" +
    "\uffbc\001\002\000\006\040\u011e\041\u0113\001\002\000\004" +
    "\062\u011f\001\002\000\006\034\uffbd\037\uffbd\001\002\000" +
    "\012\006\uffdc\034\uffdc\037\uffdc\062\uffdc\001\002\000\024" +
    "\010\047\025\043\033\037\060\055\062\032\064\036\065" +
    "\042\066\020\067\025\001\002\000\012\006\uffdd\034\uffdd" +
    "\037\uffdd\062\uffdd\001\002\000\004\052\u0124\001\002\000" +
    "\024\010\047\025\043\033\037\060\055\062\032\064\036" +
    "\065\042\066\020\067\025\001\002\000\004\037\uffed\001" +
    "\002\000\004\060\u0129\001\002\000\036\005\035\010\047" +
    "\011\044\016\026\024\012\025\043\031\050\033\037\060" +
    "\055\062\032\064\036\065\042\066\020\067\025\001\002" +
    "\000\006\037\ufffc\042\ufffc\001\002\000\006\037\ufff0\041" +
    "\ufff0\001\002\000\004\033\u0101\001\002\000\004\037\u0105" +
    "\001\002\000\004\037\uffc5\001\002\000\006\034\u012e\041" +
    "\146\001\002\000\004\037\uffff\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\004\004\u012c" +
    "\001\001\000\002\001\001\000\044\005\030\006\023\007" +
    "\022\010\021\011\020\012\015\013\012\014\037\015\033" +
    "\016\027\020\014\021\016\022\044\023\013\036\032\037" +
    "\040\054\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u011f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\045\155\046\161\047\154" +
    "\054\164\071\156\001\001\000\002\001\001\000\004\004" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\025\073\026\074\027\077\030\101\031" +
    "\075\071\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\014\021\055\022\044\023\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\061\024\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\066\001\001\000\002\001\001\000\012" +
    "\020\014\021\065\022\044\023\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\014\021\104\022\044" +
    "\023\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\113\033\111" +
    "\034\112\035\114\071\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\123\001\001\000\002\001\001\000" +
    "\016\025\121\026\074\027\077\030\101\031\075\071\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\113\034\125\035\114\071\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\132\030\101\031\131\071\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\135\001\001\000\002\001\001\000\032\007\137\010\021" +
    "\011\020\012\015\015\033\016\027\020\014\021\016\022" +
    "\044\023\013\036\032\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\355\046" +
    "\161\047\154\054\164\071\156\001\001\000\020\047\212" +
    "\056\352\060\175\062\202\064\201\065\172\066\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\047\212" +
    "\056\336\060\175\062\202\064\201\065\172\066\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\047\212" +
    "\056\330\060\175\062\202\064\201\065\172\066\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\047\212\056\307\060\175\062\202\064\201\065" +
    "\172\066\173\001\001\000\002\001\001\000\006\047\300" +
    "\055\276\001\001\000\014\045\272\046\161\047\154\054" +
    "\164\071\156\001\001\000\002\001\001\000\022\047\212" +
    "\053\176\056\206\060\175\062\202\064\201\065\172\066" +
    "\173\001\001\000\002\001\001\000\012\047\212\064\271" +
    "\065\172\066\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\047\212\056\250\060\175\062\202\064\201\065\172\066" +
    "\173\001\001\000\004\057\224\001\001\000\002\001\001" +
    "\000\024\047\212\056\216\060\175\062\202\064\201\065" +
    "\172\066\173\067\215\070\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\047\212\056" +
    "\247\060\175\062\202\064\201\065\172\066\173\001\001" +
    "\000\002\001\001\000\004\057\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\047\212\060\226\062\202\064" +
    "\201\065\172\066\173\001\001\000\002\001\001\000\004" +
    "\061\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\212\062\233\064\201\065\172\066\173\001\001" +
    "\000\002\001\001\000\004\063\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\047\212\064" +
    "\243\065\172\066\173\001\001\000\002\001\001\000\022" +
    "\047\212\056\216\060\175\062\202\064\201\065\172\066" +
    "\173\070\246\001\001\000\002\001\001\000\020\047\212" +
    "\056\247\060\175\062\202\064\201\065\172\066\173\001" +
    "\001\000\004\057\224\001\001\000\004\057\224\001\001" +
    "\000\002\001\001\000\022\047\212\053\264\056\206\060" +
    "\175\062\202\064\201\065\172\066\173\001\001\000\002" +
    "\001\001\000\022\047\212\050\257\056\260\060\175\062" +
    "\202\064\201\065\172\066\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\224\001" +
    "\001\000\020\047\212\056\263\060\175\062\202\064\201" +
    "\065\172\066\173\001\001\000\002\001\001\000\004\057" +
    "\224\001\001\000\002\001\001\000\020\047\212\056\267" +
    "\060\175\062\202\064\201\065\172\066\173\001\001\000" +
    "\002\001\001\000\004\057\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\046\275\047" +
    "\154\054\164\071\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\304\001\001\000\012\046\303\047\154" +
    "\054\164\071\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\306\047\154\054\164\071\156\001\001" +
    "\000\002\001\001\000\004\057\224\001\001\000\010\020" +
    "\113\035\311\051\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\113\035\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\046\317\047\154\054\164" +
    "\071\156\001\001\000\002\001\001\000\012\046\321\047" +
    "\154\054\164\071\156\001\001\000\002\001\001\000\022" +
    "\047\212\053\323\056\206\060\175\062\202\064\201\065" +
    "\172\066\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\047\212\053\326\056\206\060\175\062\202\064" +
    "\201\065\172\066\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\224\001\001\000\012\046\332\047" +
    "\154\054\164\071\156\001\001\000\002\001\001\000\012" +
    "\046\334\047\154\054\164\071\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\047\212\052\342\056" +
    "\343\060\175\062\202\064\201\065\172\066\173\001\001" +
    "\000\002\001\001\000\004\057\224\001\001\000\020\047" +
    "\212\056\347\060\175\062\202\064\201\065\172\066\173" +
    "\001\001\000\020\047\212\056\346\060\175\062\202\064" +
    "\201\065\172\066\173\001\001\000\004\057\224\001\001" +
    "\000\004\057\224\001\001\000\012\046\351\047\154\054" +
    "\164\071\156\001\001\000\002\001\001\000\004\057\224" +
    "\001\001\000\012\046\354\047\154\054\164\071\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\047\212" +
    "\056\357\060\175\062\202\064\201\065\172\066\173\001" +
    "\001\000\004\057\224\001\001\000\016\010\362\011\020" +
    "\012\015\016\027\036\032\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\014\021\364\022\044" +
    "\023\013\001\001\000\002\001\001\000\006\012\367\037" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\373\012\015\017\372\036\032\037" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\014\021\375\022\044\023\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0101\001\001\000\010" +
    "\042\u010e\043\u010d\044\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0105\001\001\000\044\005\u0106" +
    "\006\023\007\022\010\021\011\020\012\015\013\012\014" +
    "\037\015\033\016\027\020\014\021\016\022\044\023\013" +
    "\036\032\037\040\054\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\u011c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\u0111\044\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\014" +
    "\021\u0121\022\044\023\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\014\021\u0124\022\044\023\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\006" +
    "\u0127\007\022\010\021\011\020\012\015\014\037\015\033" +
    "\016\027\020\014\021\016\022\044\023\013\036\032\037" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\u012a\001\001\000\004\040\u012b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public PascalProgram root = null;

	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Sintax Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" at line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

	public void syntax_error(Symbol cur_token) {
		report_error("on Token "+ cur_token, cur_token);
	}

	public static void main(String[] args){
		try {
			parser asin = new parser(
					new Lexer( new FileReader(args[0])));
			Object result = asin.parse().value;
			System.out.println("\n*** Resultados finales ***");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // empty ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // element ::= element expression 
            {
              Element RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(el, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // element ::= expression 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Element r = new Element(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // elementList ::= elementList COMMA element 
            {
              ElementList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElementList el = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e, (String) c, el);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // elementList ::= element 
            {
              ElementList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ElementList r = new ElementList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elementList",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // primaryExpression ::= variable 
            {
              PrimaryExpression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression(var);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // primaryExpression ::= STRING 
            {
              PrimaryExpression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) string);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // primaryExpression ::= INTEGER 
            {
              PrimaryExpression RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) integer);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // primaryExpression ::= NIL 
            {
              PrimaryExpression RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) nil);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // primaryExpression ::= LEFT_PAR expression RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lp, exp, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // primaryExpression ::= LEFT_BRACKET elementList RIGHT_BRACKET 
            {
              PrimaryExpression RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElementList elm = (ElementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) lb, elm, (String) rb);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // primaryExpression ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              PrimaryExpression RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									PrimaryExpression r = new PrimaryExpression((String) tid, (String) lp, el, (String) rp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unaryOp ::= NOT 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unaryOp ::= MINUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unaryOp ::= PLUS 
            {
              UnaryOp RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryOp r = new UnaryOp((String) u);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unaryExpression ::= primaryExpression 
            {
              UnaryExpression RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpression pe = (PrimaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(pe);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unaryExpression ::= unaryOp unaryExpression 
            {
              UnaryExpression RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOp uo = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									UnaryExpression r = new UnaryExpression(uo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // multiplicativeOp ::= IN 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // multiplicativeOp ::= AND 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // multiplicativeOp ::= MOD 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // multiplicativeOp ::= DIV 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // multiplicativeOp ::= DIVIDE 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multiplicativeOp ::= PRODUCT 
            {
              MultiplicativeOp RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeOp r = new MultiplicativeOp((String) o);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeOp",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplicativeExpression ::= unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // multiplicativeExpression ::= multiplicativeExpression multiplicativeOp unaryExpression 
            {
              MultiplicativeExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MultiplicativeOp mo = (MultiplicativeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		UnaryExpression ue = (UnaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									MultiplicativeExpression r = new MultiplicativeExpression(me, mo, ue);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicativeExpression",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // additiveOp ::= OR 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // additiveOp ::= MINUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // additiveOp ::= PLUS 
            {
              AdditiveOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveOp r = new AdditiveOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveOp",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // additiveExpression ::= multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // additiveExpression ::= additiveExpression additiveOp multiplicativeExpression 
            {
              AdditiveExpression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AdditiveOp ao = (AdditiveOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpression me = (MultiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									AdditiveExpression r = new AdditiveExpression(ae, ao, me);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relationalOp ::= GREATER_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relationalOp ::= GREATER_EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relationalOp ::= NOT_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // relationalOp ::= EQUALS 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // relationalOp ::= LESS_EQUAL 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relationalOp ::= LESS_THAN 
            {
              RelationalOp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RelationalOp r = new RelationalOp((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= error 
            {
              Expression RESULT =null;
		
									System.out.println("expression error");
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= INT_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= additiveExpression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= expression relationalOp additiveExpression 
            {
              Expression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelationalOp ro = (RelationalOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpression ae = (AdditiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Expression r = new Expression(ex, ro, ae);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // recordVariableList ::= recordVariableList COMMA variable 
            {
              RecordVariableList RESULT =null;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(rvl, (String) s, v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // recordVariableList ::= variable 
            {
              RecordVariableList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordVariableList r = new RecordVariableList(v);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordVariableList",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // label ::= INTEGER 
            {
              Label RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Label r = new Label((String) s);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expressionList ::= expressionList COMMA expression 
            {
              ExpressionList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(el, (String) s, ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expressionList ::= expression 
            {
              ExpressionList RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ExpressionList r = new ExpressionList(ex);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // forList ::= expression DOWNTO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // forList ::= expression TO expression 
            {
              ForList RESULT =null;
		int exlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exl = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exr = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ForList r = new ForList(exl, (String) s, exr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forList",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // caseList ::= caseList SEMICOLON caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) sc, (String) c, stm, cl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // caseList ::= caseLabelList COLON statement 
            {
              CaseList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseList r = new CaseList(cll, (String) s, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // subscriptList ::= subscriptList COMMA expression 
            {
              SubscriptList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(sl, (String) s, e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // subscriptList ::= expression 
            {
              SubscriptList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SubscriptList r = new SubscriptList(e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subscriptList",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable ::= ID ASIGN 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) a);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable ::= ID DOT ID 
            {
              Variable RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) idl, (String) idr, (String) d);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable ::= ID LEFT_BRACKET subscriptList RIGHT_BRACKET 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SubscriptList sl = (SubscriptList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variable r = new Variable((String) id, (String) lb, (String) rb, sl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= empty 
            {
              Statement RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= ID 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= label COLON statement 
            {
              Statement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Label lb = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(lb, (String)c, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= BEGIN statementList END 
            {
              Statement RESULT =null;
		int begleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int begright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object beg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)beg, sl, (String)end);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= variable expression SEMICOLON 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement(var, exp, (String)sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= IF expression THEN statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= WHILE expression DO statement 
            {
              Statement RESULT =null;
		int whileexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int whileexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object whileexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)whileexp, exp, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= CASE expression OF caseList END 
            {
              Statement RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String) caseexp, exp, (String)of, cl, (String)endexp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= WITH recordVariableList DO statement 
            {
              Statement RESULT =null;
		int withleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int withright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object with = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		RecordVariableList rvl = (RecordVariableList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)with, rvl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= FOR ID ASIGN forList DO statement 
            {
              Statement RESULT =null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object forexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForList fl = (ForList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int doexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int doexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object doexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)forexp, (String)id, (String)asign, fl, (String)doexp, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= REPEAT statementList UNTIL expression 
            {
              Statement RESULT =null;
		int rptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rpt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int untilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int untilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object until = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rpt, sl, (String)until, exp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= READ_LN LEFT_PAR expressionList RIGHT_PAR 
            {
              Statement RESULT =null;
		int rdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object rdl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)rdl, (String)lpar, el, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= WRITE_LN LEFT_PAR expressionList RIGHT_PAR 
            {
              Statement RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object wln = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)wln, (String)lpar, el, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= ID LEFT_PAR expressionList RIGHT_PAR 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)id, (String)lpar, el, (String)rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= IF expression THEN statement ELSE statement 
            {
              Statement RESULT =null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object then = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement f = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Statement r = new Statement((String)ifexp, exp, (String)then, e, (String)elseexp, f);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statementList ::= statementList SEMICOLON statement 
            {
              StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(sl, (String)sc, stm);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statementList ::= statement 
            {
              StatementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StatementList r = new StatementList(stm);
									RESULT = r;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameteridList ::= parameteridList COMMA ID 
            {
              ParameterIdList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pl = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList(pl, (String)c, (String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameteridList ::= ID 
            {
              ParameterIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ParameterIdList r = new ParameterIdList((String)id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameteridList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // formalParameterSection ::= FUNCTION ID parameters COLON ID 
            {
              FormalParameterSection RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) func, (String) idl, params, (String) colon, (String) idr);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // formalParameterSection ::= PROCEDURE ID parameters 
            {
              FormalParameterSection RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameters params = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) proc, (String) id, params);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // formalParameterSection ::= VAR parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection((String) var, pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // formalParameterSection ::= parameteridList COLON ID 
            {
              FormalParameterSection RESULT =null;
		int pilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterIdList pil = (ParameterIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterSection r = new FormalParameterSection(pil, (String) colon, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterSection",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // formalParameterList ::= formalParameterList SEMICOLON formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fpl, (String) sc, fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // formalParameterList ::= formalParameterSection 
            {
              FormalParameterList RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParameterSection fps = (FormalParameterSection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FormalParameterList r = new FormalParameterList(fps);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalParameterList",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameters ::= LEFT_PAR formalParameterList RIGHT_PAR 
            {
              Parameters RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalParameterList fpl = (FormalParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Parameters r = new Parameters((String) lpar, fpl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // blockOrForward ::= SEMICOLON FORWARD 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, (String) fw);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // blockOrForward ::= SEMICOLON block 
            {
              BlockOrForward RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									BlockOrForward r = new BlockOrForward((String) sc, bl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blockOrForward",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procOrFunc ::= FUNCTION ID parameters COLON ID blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward bof = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) func, (String) idl, (String) idr, par, bof, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procOrFunc ::= PROCEDURE ID parameters blockOrForward 
            {
              ProcOrFunc RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object proc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parameters par = (Parameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockOrForward blo = (BlockOrForward)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcOrFunc r = new ProcOrFunc((String) proc, (String) id, par, blo);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procOrFunc",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // procAndFuncDeclaration ::= procAndFuncDeclaration SEMICOLON procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pafdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pafdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration pafd = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pafd, (String) sc, pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // procAndFuncDeclaration ::= procOrFunc 
            {
              ProcAndFuncDeclaration RESULT =null;
		int pofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOrFunc pof = (ProcOrFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProcAndFuncDeclaration r = new ProcAndFuncDeclaration(pof);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procAndFuncDeclaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // caseLabelList ::= caseLabelList COMMA constant 
            {
              CaseLabelList RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant con = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(cll, (String) comma, con);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // caseLabelList ::= constant 
            {
              CaseLabelList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									CaseLabelList r = new CaseLabelList(c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caseLabelList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variant ::= caseLabelList COLON LEFT_PAR fieldList RIGHT_PAR 
            {
              Variant RESULT =null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CaseLabelList cll = (CaseLabelList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Variant r = new Variant(cll, (String) colon, (String) lpar, fl, (String) rpar);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variant ::= empty 
            {
              Variant RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variant",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variantList ::= variantList SEMICOLON variant 
            {
              VariantList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari, (String) sc, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variantList ::= variant 
            {
              VariantList RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variant vari = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantList r = new VariantList(vari);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tagField ::= ID COLON ID 
            {
              TagField RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idrright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) idl, (String) idr, (String) colon);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tagField ::= ID 
            {
              TagField RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									TagField r = new TagField((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tagField",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variantPart ::= CASE tagField OF variantList 
            {
              VariantPart RESULT =null;
		int caseexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caseexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object caseexp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TagField tf = (TagField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantList vl = (VariantList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									VariantPart r = new VariantPart((String) caseexp, tf, (String) of, vl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variantPart",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fieldidList ::= fieldidList COMMA ID 
            {
              FieldIdList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList(fl, (String) comma, (String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fieldidList ::= ID 
            {
              FieldIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldIdList r = new FieldIdList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldidList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // recordField ::= fieldidList COLON type 
            {
              RecordField RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FieldIdList fl = (FieldIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RecordField r = new RecordField(fl, (String) colon, type);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // recordField ::= empty 
            {
              RecordField RESULT =null;
		
									RESULT = null;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("recordField",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fixedPart ::= fixedPart SEMICOLON recordField 
            {
              FixedPart RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(fp, (String) sc, rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fixedPart ::= recordField 
            {
              FixedPart RESULT =null;
		int rfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RecordField rf = (RecordField)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FixedPart r = new FixedPart(rf);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fixedPart",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fieldList ::= variantPart 
            {
              FieldList RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fieldList ::= fixedPart SEMICOLON variantPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariantPart vp = (VariantPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp, (String) sc, vp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // fieldList ::= fixedPart 
            {
              FieldList RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FixedPart fp = (FixedPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									FieldList r = new FieldList(fp);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // indexList ::= indexList COMMA simpleType 
            {
              IndexList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(il, (String) comma, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // indexList ::= simpleType 
            {
              IndexList RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IndexList r = new IndexList(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("indexList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structuredType ::= PACKED structuredType 
            {
              StructuredType RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) p, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // structuredType ::= FILE OF type 
            {
              StructuredType RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) f, t);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // structuredType ::= SET OF simpleType 
            {
              StructuredType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) o, (String) s, st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // structuredType ::= RECORD fieldList END 
            {
              StructuredType RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList fl = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) e, (String) rec, fl);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // structuredType ::= ARRAY LEFT_BRACKET indexList RIGHT_BRACKET OF type 
            {
              StructuredType RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IndexList il = (IndexList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rbraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rbraright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rbra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ofleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ofright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object of = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type ty = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									StructuredType r = new StructuredType((String) arr, (String) lbra, (String) rbra, (String) of, il, ty);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structuredType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simpleType ::= ID 
            {
              SimpleType RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simpleType ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              SimpleType RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SimpleType r = new SimpleType((String) lpar, (String) rpar, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= constant 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant st = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= structuredType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructuredType st = (StructuredType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= simpleType 
            {
              Type RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleType st = (SimpleType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Type r = new Type(st);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constant ::= STRING 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // constant ::= INTEGER 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Constant r = new Constant((String) c);
									RESULT = r;
;									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variableidList ::= variableidList COMMA ID 
            {
              VariableIdList RESULT =null;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableIdList r = new VariableIdList((String) id, (String) c, vil);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variableidList ::= ID 
            {
              VariableIdList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	VariableIdList r = new VariableIdList((String) id);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableidList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variableDeclaration ::= variableDeclaration SEMICOLON variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) c, (String) sc, vil, vd,t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variableDeclaration ::= VAR variableidList COLON type 
            {
              VariableDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIdList vil = (VariableIdList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		VariableDeclaration r = new VariableDeclaration((String) var, (String) c, vil, t);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variableDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // typeDeclaration ::= typeDeclaration SEMICOLON ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeDeclaration td = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		TypeDeclaration r = new TypeDeclaration((String) id, (String) e, (String) sc, t, td);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // typeDeclaration ::= type ID EQUALS type 
            {
              TypeDeclaration RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type tl = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type tr = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								   	TypeDeclaration r = new TypeDeclaration((String) id, (String) e, tl, tr);
								   	RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constantDeclaration ::= constantDeclaration SEMICOLON ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ConstantDeclaration cd = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) id, (String) eq, (String) sc, cons, cd);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constantDeclaration ::= CONST ID EQUALS constant 
            {
              ConstantDeclaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant cons = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							   		ConstantDeclaration r = new ConstantDeclaration((String) c, (String) id, (String) eq, cons);
							   		RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantDeclaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // labelDeclaration ::= labelDeclaration COMMA INTEGER 
            {
              LabelDeclaration RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration ld = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(ld, (String) i, (String) c);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // labelDeclaration ::= label INTEGER 
            {
              LabelDeclaration RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Label l = (Label)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									LabelDeclaration r = new LabelDeclaration(l, (String) i);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labelDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block5 ::= BEGIN statementList END 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(sl, (String) b, (String) e);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block5",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block4 ::= block5 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block4 ::= procAndFuncDeclaration SEMICOLON block5 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcAndFuncDeclaration d = (ProcAndFuncDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block4",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block3 ::= block4 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block3 ::= variableDeclaration SEMICOLON block4 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration d = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block3",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block2 ::= block3 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block2 ::= typeDeclaration SEMICOLON block3 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeDeclaration d = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block1 ::= block2 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block1 ::= constantDeclaration SEMICOLON block2 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstantDeclaration d = (ConstantDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= block1 
            {
              Block RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= labelDeclaration SEMICOLON block1 
            {
              Block RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LabelDeclaration d = (LabelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Block r = new Block(b,d,(String) sc);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifierList ::= identifierList COMMA ID 
            {
              IdentifierList RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id, (String) c, il);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifierList ::= ID 
            {
              IdentifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									IdentifierList r = new IdentifierList((String) id);
									RESULT = r;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programHeading ::= LEFT_PAR identifierList RIGHT_PAR 
            {
              ProgramHeading RESULT =null;
		int lparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentifierList il = (IdentifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rpar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									ProgramHeading r = new ProgramHeading((String) lpar, (String) rpar, il);
									RESULT = r;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programHeading",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pascalProgram ::= PROGRAM ID programHeading SEMICOLON block DOT 
            {
              PascalProgram RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object pro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int phleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ProgramHeading ph = (ProgramHeading)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									  PascalProgram r = new PascalProgram((String) pro, (String) id, ph, (String) sc, b, (String) dt);
									  RESULT = r;
									  parser.root = RESULT;
									  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pascalProgram",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pascalProgram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PascalProgram start_val = (PascalProgram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

